### This file was generated by Nexus Schema
### Do not make changes to this file directly


type Address {
  User: User!
  city: String!
  country: String!
  id: Int!
  phoneNumber: String!
  street: String!
  userId: Int!
  zipCode: String!
}

type AddressAvgAggregateOutputType {
  id: Float
  userId: Float
}

input AddressAvgOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
}

type AddressCountAggregateOutputType {
  _all: Int!
  city: Int!
  country: Int!
  id: Int!
  phoneNumber: Int!
  street: Int!
  userId: Int!
  zipCode: Int!
}

input AddressCountOrderByAggregateInput {
  city: SortOrder
  country: SortOrder
  id: SortOrder
  phoneNumber: SortOrder
  street: SortOrder
  userId: SortOrder
  zipCode: SortOrder
}

input AddressCreateInput {
  User: UserCreateNestedOneWithoutAddressInput!
  city: String!
  country: String!
  phoneNumber: String!
  street: String!
  zipCode: String!
}

input AddressCreateManyInput {
  city: String!
  country: String!
  id: Int
  phoneNumber: String!
  street: String!
  userId: Int!
  zipCode: String!
}

input AddressCreateNestedOneWithoutUserInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutUserInput
  create: AddressUncheckedCreateWithoutUserInput
}

input AddressCreateOrConnectWithoutUserInput {
  create: AddressUncheckedCreateWithoutUserInput!
  where: AddressWhereUniqueInput!
}

input AddressCreateWithoutUserInput {
  city: String!
  country: String!
  phoneNumber: String!
  street: String!
  zipCode: String!
}

type AddressMaxAggregateOutputType {
  city: String
  country: String
  id: Int
  phoneNumber: String
  street: String
  userId: Int
  zipCode: String
}

input AddressMaxOrderByAggregateInput {
  city: SortOrder
  country: SortOrder
  id: SortOrder
  phoneNumber: SortOrder
  street: SortOrder
  userId: SortOrder
  zipCode: SortOrder
}

type AddressMinAggregateOutputType {
  city: String
  country: String
  id: Int
  phoneNumber: String
  street: String
  userId: Int
  zipCode: String
}

input AddressMinOrderByAggregateInput {
  city: SortOrder
  country: SortOrder
  id: SortOrder
  phoneNumber: SortOrder
  street: SortOrder
  userId: SortOrder
  zipCode: SortOrder
}

input AddressOrderByWithAggregationInput {
  _avg: AddressAvgOrderByAggregateInput
  _count: AddressCountOrderByAggregateInput
  _max: AddressMaxOrderByAggregateInput
  _min: AddressMinOrderByAggregateInput
  _sum: AddressSumOrderByAggregateInput
  city: SortOrder
  country: SortOrder
  id: SortOrder
  phoneNumber: SortOrder
  street: SortOrder
  userId: SortOrder
  zipCode: SortOrder
}

input AddressOrderByWithRelationInput {
  User: UserOrderByWithRelationInput
  city: SortOrder
  country: SortOrder
  id: SortOrder
  phoneNumber: SortOrder
  street: SortOrder
  userId: SortOrder
  zipCode: SortOrder
}

input AddressRelationFilter {
  is: AddressWhereInput
  isNot: AddressWhereInput
}

enum AddressScalarFieldEnum {
  city
  country
  id
  phoneNumber
  street
  userId
  zipCode
}

input AddressScalarWhereWithAggregatesInput {
  AND: [AddressScalarWhereWithAggregatesInput]
  NOT: [AddressScalarWhereWithAggregatesInput]
  OR: [AddressScalarWhereWithAggregatesInput]
  city: StringWithAggregatesFilter
  country: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  phoneNumber: StringWithAggregatesFilter
  street: StringWithAggregatesFilter
  userId: IntWithAggregatesFilter
  zipCode: StringWithAggregatesFilter
}

type AddressSumAggregateOutputType {
  id: Int
  userId: Int
}

input AddressSumOrderByAggregateInput {
  id: SortOrder
  userId: SortOrder
}

input AddressUncheckedCreateInput {
  city: String!
  country: String!
  id: Int
  phoneNumber: String!
  street: String!
  userId: Int!
  zipCode: String!
}

input AddressUncheckedCreateNestedOneWithoutUserInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutUserInput
  create: AddressUncheckedCreateWithoutUserInput
}

input AddressUncheckedCreateWithoutUserInput {
  city: String!
  country: String!
  id: Int
  phoneNumber: String!
  street: String!
  zipCode: String!
}

input AddressUncheckedUpdateInput {
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  street: StringFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
  zipCode: StringFieldUpdateOperationsInput
}

input AddressUncheckedUpdateManyInput {
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  street: StringFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
  zipCode: StringFieldUpdateOperationsInput
}

input AddressUncheckedUpdateOneWithoutUserNestedInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutUserInput
  create: AddressUncheckedCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: AddressUncheckedUpdateWithoutUserInput
  upsert: AddressUpsertWithoutUserInput
}

input AddressUncheckedUpdateWithoutUserInput {
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  street: StringFieldUpdateOperationsInput
  zipCode: StringFieldUpdateOperationsInput
}

input AddressUpdateInput {
  User: UserUpdateOneRequiredWithoutAddressNestedInput
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  street: StringFieldUpdateOperationsInput
  zipCode: StringFieldUpdateOperationsInput
}

input AddressUpdateManyMutationInput {
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  street: StringFieldUpdateOperationsInput
  zipCode: StringFieldUpdateOperationsInput
}

input AddressUpdateOneWithoutUserNestedInput {
  connect: AddressWhereUniqueInput
  connectOrCreate: AddressCreateOrConnectWithoutUserInput
  create: AddressUncheckedCreateWithoutUserInput
  delete: Boolean
  disconnect: Boolean
  update: AddressUncheckedUpdateWithoutUserInput
  upsert: AddressUpsertWithoutUserInput
}

input AddressUpdateWithoutUserInput {
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  street: StringFieldUpdateOperationsInput
  zipCode: StringFieldUpdateOperationsInput
}

input AddressUpsertWithoutUserInput {
  create: AddressUncheckedCreateWithoutUserInput!
  update: AddressUncheckedUpdateWithoutUserInput!
}

input AddressWhereInput {
  AND: [AddressWhereInput]
  NOT: [AddressWhereInput]
  OR: [AddressWhereInput]
  User: UserWhereInput
  city: StringFilter
  country: StringFilter
  id: IntFilter
  phoneNumber: StringFilter
  street: StringFilter
  userId: IntFilter
  zipCode: StringFilter
}

input AddressWhereUniqueInput {
  id: Int
  userId: Int
}

type AggregateAddress {
  _avg: AddressAvgAggregateOutputType
  _count: AddressCountAggregateOutputType
  _max: AddressMaxAggregateOutputType
  _min: AddressMinAggregateOutputType
  _sum: AddressSumAggregateOutputType
}

type AggregateOrder {
  _avg: OrderAvgAggregateOutputType
  _count: OrderCountAggregateOutputType
  _max: OrderMaxAggregateOutputType
  _min: OrderMinAggregateOutputType
  _sum: OrderSumAggregateOutputType
}

type AggregateOrderAddress {
  _avg: OrderAddressAvgAggregateOutputType
  _count: OrderAddressCountAggregateOutputType
  _max: OrderAddressMaxAggregateOutputType
  _min: OrderAddressMinAggregateOutputType
  _sum: OrderAddressSumAggregateOutputType
}

type AggregateOrderProduct {
  _avg: OrderProductAvgAggregateOutputType
  _count: OrderProductCountAggregateOutputType
  _max: OrderProductMaxAggregateOutputType
  _min: OrderProductMinAggregateOutputType
  _sum: OrderProductSumAggregateOutputType
}

type AggregateProduct {
  _avg: ProductAvgAggregateOutputType
  _count: ProductCountAggregateOutputType
  _max: ProductMaxAggregateOutputType
  _min: ProductMinAggregateOutputType
  _sum: ProductSumAggregateOutputType
}

type AggregateReview {
  _avg: ReviewAvgAggregateOutputType
  _count: ReviewCountAggregateOutputType
  _max: ReviewMaxAggregateOutputType
  _min: ReviewMinAggregateOutputType
  _sum: ReviewSumAggregateOutputType
}

type AggregateShoppingProduct {
  _avg: ShoppingProductAvgAggregateOutputType
  _count: ShoppingProductCountAggregateOutputType
  _max: ShoppingProductMaxAggregateOutputType
  _min: ShoppingProductMinAggregateOutputType
  _sum: ShoppingProductSumAggregateOutputType
}

type AggregateUser {
  _avg: UserAvgAggregateOutputType
  _count: UserCountAggregateOutputType
  _max: UserMaxAggregateOutputType
  _min: UserMinAggregateOutputType
  _sum: UserSumAggregateOutputType
}

type AuthPayload {
  token: String
  user: User
}

type BatchPayload {
  count: Int!
}

"""
The `BigInt` scalar type represents non-fractional signed whole numeric values.
@see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt
"""
scalar BigInt

"""The `Byte` scalar type represents byte value as a Buffer"""
scalar Bytes

input CartProducts {
  productId: Int
  quantity: Int
}

type CategoryCount {
  category: String!
  count: Int!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

"""An arbitrary-precision Decimal type"""
scalar Decimal

input EnumOrderTypeFieldUpdateOperationsInput {
  set: OrderType
}

input EnumOrderTypeFilter {
  equals: OrderType
  in: [OrderType]
  not: NestedEnumOrderTypeFilter
  notIn: [OrderType]
}

input EnumOrderTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumOrderTypeFilter
  _min: NestedEnumOrderTypeFilter
  equals: OrderType
  in: [OrderType]
  not: NestedEnumOrderTypeWithAggregatesFilter
  notIn: [OrderType]
}

input EnumRoleFieldUpdateOperationsInput {
  set: Role
}

input EnumRoleFilter {
  equals: Role
  in: [Role]
  not: NestedEnumRoleFilter
  notIn: [Role]
}

input EnumRoleWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumRoleFilter
  _min: NestedEnumRoleFilter
  equals: Role
  in: [Role]
  not: NestedEnumRoleWithAggregatesFilter
  notIn: [Role]
}

input FloatFieldUpdateOperationsInput {
  decrement: Float
  divide: Float
  increment: Float
  multiply: Float
  set: Float
}

input FloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float]
}

input FloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar Json @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  changePassword(currentPassword: String!, id: Int!, password: String!): Boolean
  createOneOrder(data: OrderCreateInput!): Order!
  createOneOrderAddress(data: OrderAddressCreateInput!): OrderAddress!
  createOneOrderProduct(data: OrderProductCreateInput!): OrderProduct!
  createOneProduct(data: ProductCreateInput!): Product!
  createOneReview(data: ReviewCreateInput!): Review!
  createOneShoppingProduct(data: ShoppingProductCreateInput!): ShoppingProduct!
  deleteManyShoppingProduct(where: ShoppingProductWhereInput): BatchPayload!
  deleteOneOrder(where: OrderWhereUniqueInput!): Order
  deleteOneProduct(where: ProductWhereUniqueInput!): Product
  deleteOneReview(where: ReviewWhereUniqueInput!): Review
  deleteOneShoppingProduct(where: ShoppingProductWhereUniqueInput!): ShoppingProduct
  deleteOneUser(where: UserWhereUniqueInput!): User
  login(email: String!, password: String!): AuthPayload
  setCart(products: [CartProducts!]): [ShoppingProduct]
  signout: Boolean
  signup(birthday: String, city: String, country: String, email: String!, firstName: String!, gender: String, lastName: String!, password: String!, phoneNumber: String, street: String, zipCode: String): AuthPayload
  updateOneAddress(data: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address!
  updateOneProduct(data: ProductUpdateInput!, where: ProductWhereUniqueInput!): Product!
  updateOneShoppingProduct(data: ShoppingProductUpdateInput!, where: ShoppingProductWhereUniqueInput!): ShoppingProduct!
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertOneAddress(create: AddressCreateInput!, update: AddressUpdateInput!, where: AddressWhereUniqueInput!): Address!
  upsertOneShoppingProduct(create: ShoppingProductCreateInput!, update: ShoppingProductUpdateInput!, where: ShoppingProductWhereUniqueInput!): ShoppingProduct!
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime]
}

input NestedEnumOrderTypeFilter {
  equals: OrderType
  in: [OrderType]
  not: NestedEnumOrderTypeFilter
  notIn: [OrderType]
}

input NestedEnumOrderTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumOrderTypeFilter
  _min: NestedEnumOrderTypeFilter
  equals: OrderType
  in: [OrderType]
  not: NestedEnumOrderTypeWithAggregatesFilter
  notIn: [OrderType]
}

input NestedEnumRoleFilter {
  equals: Role
  in: [Role]
  not: NestedEnumRoleFilter
  notIn: [Role]
}

input NestedEnumRoleWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumRoleFilter
  _min: NestedEnumRoleFilter
  equals: Role
  in: [Role]
  not: NestedEnumRoleWithAggregatesFilter
  notIn: [Role]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float]
}

input NestedFloatWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedFloatFilter
  _min: NestedFloatFilter
  _sum: NestedFloatFilter
  equals: Float
  gt: Float
  gte: Float
  in: [Float]
  lt: Float
  lte: Float
  not: NestedFloatWithAggregatesFilter
  notIn: [Float]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Order {
  OrderStatus: String!
  User: User!
  _count: OrderCountOutputType!
  address: OrderAddress
  date: DateTime!
  id: Int!
  products(cursor: OrderProductWhereUniqueInput, distinct: OrderProductScalarFieldEnum, orderBy: OrderProductOrderByWithRelationInput, skip: Int, take: Int, where: OrderProductWhereInput): [OrderProduct!]!
  subtotal: Int!
  type: OrderType!
  userId: Int!
}

type OrderAddress {
  city: String!
  country: String!
  fullName: String!
  id: Int!
  order: Order!
  orderId: Int!
  phoneNumber: String!
  street: String!
  zipCode: String!
}

type OrderAddressAvgAggregateOutputType {
  id: Float
  orderId: Float
}

input OrderAddressAvgOrderByAggregateInput {
  id: SortOrder
  orderId: SortOrder
}

type OrderAddressCountAggregateOutputType {
  _all: Int!
  city: Int!
  country: Int!
  fullName: Int!
  id: Int!
  orderId: Int!
  phoneNumber: Int!
  street: Int!
  zipCode: Int!
}

input OrderAddressCountOrderByAggregateInput {
  city: SortOrder
  country: SortOrder
  fullName: SortOrder
  id: SortOrder
  orderId: SortOrder
  phoneNumber: SortOrder
  street: SortOrder
  zipCode: SortOrder
}

input OrderAddressCreateInput {
  city: String!
  country: String!
  fullName: String!
  order: OrderCreateNestedOneWithoutAddressInput!
  phoneNumber: String!
  street: String!
  zipCode: String!
}

input OrderAddressCreateManyInput {
  city: String!
  country: String!
  fullName: String!
  id: Int
  orderId: Int!
  phoneNumber: String!
  street: String!
  zipCode: String!
}

input OrderAddressCreateNestedOneWithoutOrderInput {
  connect: OrderAddressWhereUniqueInput
  connectOrCreate: OrderAddressCreateOrConnectWithoutOrderInput
  create: OrderAddressUncheckedCreateWithoutOrderInput
}

input OrderAddressCreateOrConnectWithoutOrderInput {
  create: OrderAddressUncheckedCreateWithoutOrderInput!
  where: OrderAddressWhereUniqueInput!
}

input OrderAddressCreateWithoutOrderInput {
  city: String!
  country: String!
  fullName: String!
  phoneNumber: String!
  street: String!
  zipCode: String!
}

type OrderAddressMaxAggregateOutputType {
  city: String
  country: String
  fullName: String
  id: Int
  orderId: Int
  phoneNumber: String
  street: String
  zipCode: String
}

input OrderAddressMaxOrderByAggregateInput {
  city: SortOrder
  country: SortOrder
  fullName: SortOrder
  id: SortOrder
  orderId: SortOrder
  phoneNumber: SortOrder
  street: SortOrder
  zipCode: SortOrder
}

type OrderAddressMinAggregateOutputType {
  city: String
  country: String
  fullName: String
  id: Int
  orderId: Int
  phoneNumber: String
  street: String
  zipCode: String
}

input OrderAddressMinOrderByAggregateInput {
  city: SortOrder
  country: SortOrder
  fullName: SortOrder
  id: SortOrder
  orderId: SortOrder
  phoneNumber: SortOrder
  street: SortOrder
  zipCode: SortOrder
}

input OrderAddressOrderByWithAggregationInput {
  _avg: OrderAddressAvgOrderByAggregateInput
  _count: OrderAddressCountOrderByAggregateInput
  _max: OrderAddressMaxOrderByAggregateInput
  _min: OrderAddressMinOrderByAggregateInput
  _sum: OrderAddressSumOrderByAggregateInput
  city: SortOrder
  country: SortOrder
  fullName: SortOrder
  id: SortOrder
  orderId: SortOrder
  phoneNumber: SortOrder
  street: SortOrder
  zipCode: SortOrder
}

input OrderAddressOrderByWithRelationInput {
  city: SortOrder
  country: SortOrder
  fullName: SortOrder
  id: SortOrder
  order: OrderOrderByWithRelationInput
  orderId: SortOrder
  phoneNumber: SortOrder
  street: SortOrder
  zipCode: SortOrder
}

input OrderAddressRelationFilter {
  is: OrderAddressWhereInput
  isNot: OrderAddressWhereInput
}

enum OrderAddressScalarFieldEnum {
  city
  country
  fullName
  id
  orderId
  phoneNumber
  street
  zipCode
}

input OrderAddressScalarWhereWithAggregatesInput {
  AND: [OrderAddressScalarWhereWithAggregatesInput]
  NOT: [OrderAddressScalarWhereWithAggregatesInput]
  OR: [OrderAddressScalarWhereWithAggregatesInput]
  city: StringWithAggregatesFilter
  country: StringWithAggregatesFilter
  fullName: StringWithAggregatesFilter
  id: IntWithAggregatesFilter
  orderId: IntWithAggregatesFilter
  phoneNumber: StringWithAggregatesFilter
  street: StringWithAggregatesFilter
  zipCode: StringWithAggregatesFilter
}

type OrderAddressSumAggregateOutputType {
  id: Int
  orderId: Int
}

input OrderAddressSumOrderByAggregateInput {
  id: SortOrder
  orderId: SortOrder
}

input OrderAddressUncheckedCreateInput {
  city: String!
  country: String!
  fullName: String!
  id: Int
  orderId: Int!
  phoneNumber: String!
  street: String!
  zipCode: String!
}

input OrderAddressUncheckedCreateNestedOneWithoutOrderInput {
  connect: OrderAddressWhereUniqueInput
  connectOrCreate: OrderAddressCreateOrConnectWithoutOrderInput
  create: OrderAddressUncheckedCreateWithoutOrderInput
}

input OrderAddressUncheckedCreateWithoutOrderInput {
  city: String!
  country: String!
  fullName: String!
  id: Int
  phoneNumber: String!
  street: String!
  zipCode: String!
}

input OrderAddressUncheckedUpdateInput {
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  fullName: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  orderId: IntFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  street: StringFieldUpdateOperationsInput
  zipCode: StringFieldUpdateOperationsInput
}

input OrderAddressUncheckedUpdateManyInput {
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  fullName: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  orderId: IntFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  street: StringFieldUpdateOperationsInput
  zipCode: StringFieldUpdateOperationsInput
}

input OrderAddressUncheckedUpdateOneWithoutOrderNestedInput {
  connect: OrderAddressWhereUniqueInput
  connectOrCreate: OrderAddressCreateOrConnectWithoutOrderInput
  create: OrderAddressUncheckedCreateWithoutOrderInput
  delete: Boolean
  disconnect: Boolean
  update: OrderAddressUncheckedUpdateWithoutOrderInput
  upsert: OrderAddressUpsertWithoutOrderInput
}

input OrderAddressUncheckedUpdateWithoutOrderInput {
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  fullName: StringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  street: StringFieldUpdateOperationsInput
  zipCode: StringFieldUpdateOperationsInput
}

input OrderAddressUpdateInput {
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  fullName: StringFieldUpdateOperationsInput
  order: OrderUpdateOneRequiredWithoutAddressNestedInput
  phoneNumber: StringFieldUpdateOperationsInput
  street: StringFieldUpdateOperationsInput
  zipCode: StringFieldUpdateOperationsInput
}

input OrderAddressUpdateManyMutationInput {
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  fullName: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  street: StringFieldUpdateOperationsInput
  zipCode: StringFieldUpdateOperationsInput
}

input OrderAddressUpdateOneWithoutOrderNestedInput {
  connect: OrderAddressWhereUniqueInput
  connectOrCreate: OrderAddressCreateOrConnectWithoutOrderInput
  create: OrderAddressUncheckedCreateWithoutOrderInput
  delete: Boolean
  disconnect: Boolean
  update: OrderAddressUncheckedUpdateWithoutOrderInput
  upsert: OrderAddressUpsertWithoutOrderInput
}

input OrderAddressUpdateWithoutOrderInput {
  city: StringFieldUpdateOperationsInput
  country: StringFieldUpdateOperationsInput
  fullName: StringFieldUpdateOperationsInput
  phoneNumber: StringFieldUpdateOperationsInput
  street: StringFieldUpdateOperationsInput
  zipCode: StringFieldUpdateOperationsInput
}

input OrderAddressUpsertWithoutOrderInput {
  create: OrderAddressUncheckedCreateWithoutOrderInput!
  update: OrderAddressUncheckedUpdateWithoutOrderInput!
}

input OrderAddressWhereInput {
  AND: [OrderAddressWhereInput]
  NOT: [OrderAddressWhereInput]
  OR: [OrderAddressWhereInput]
  city: StringFilter
  country: StringFilter
  fullName: StringFilter
  id: IntFilter
  order: OrderWhereInput
  orderId: IntFilter
  phoneNumber: StringFilter
  street: StringFilter
  zipCode: StringFilter
}

input OrderAddressWhereUniqueInput {
  id: Int
  orderId: Int
}

type OrderAvgAggregateOutputType {
  id: Float
  subtotal: Float
  userId: Float
}

input OrderAvgOrderByAggregateInput {
  id: SortOrder
  subtotal: SortOrder
  userId: SortOrder
}

type OrderCountAggregateOutputType {
  OrderStatus: Int!
  _all: Int!
  date: Int!
  id: Int!
  subtotal: Int!
  type: Int!
  userId: Int!
}

input OrderCountOrderByAggregateInput {
  OrderStatus: SortOrder
  date: SortOrder
  id: SortOrder
  subtotal: SortOrder
  type: SortOrder
  userId: SortOrder
}

type OrderCountOutputType {
  products: Int!
}

input OrderCreateInput {
  OrderStatus: String
  User: UserCreateNestedOneWithoutOrdersInput!
  address: OrderAddressCreateNestedOneWithoutOrderInput
  date: DateTime
  products: OrderProductCreateNestedManyWithoutOrderInput
  subtotal: Int
  type: OrderType!
}

input OrderCreateManyInput {
  OrderStatus: String
  date: DateTime
  id: Int
  subtotal: Int
  type: OrderType!
  userId: Int!
}

input OrderCreateManyUserInput {
  OrderStatus: String
  date: DateTime
  id: Int
  subtotal: Int
  type: OrderType!
}

input OrderCreateManyUserInputEnvelope {
  data: OrderCreateManyUserInput!
  skipDuplicates: Boolean
}

input OrderCreateNestedManyWithoutUserInput {
  connect: [OrderWhereUniqueInput]
  connectOrCreate: [OrderCreateOrConnectWithoutUserInput]
  create: [OrderCreateWithoutUserInput]
  createMany: OrderCreateManyUserInputEnvelope
}

input OrderCreateNestedOneWithoutAddressInput {
  connect: OrderWhereUniqueInput
  connectOrCreate: OrderCreateOrConnectWithoutAddressInput
  create: OrderUncheckedCreateWithoutAddressInput
}

input OrderCreateNestedOneWithoutProductsInput {
  connect: OrderWhereUniqueInput
  connectOrCreate: OrderCreateOrConnectWithoutProductsInput
  create: OrderUncheckedCreateWithoutProductsInput
}

input OrderCreateOrConnectWithoutAddressInput {
  create: OrderUncheckedCreateWithoutAddressInput!
  where: OrderWhereUniqueInput!
}

input OrderCreateOrConnectWithoutProductsInput {
  create: OrderUncheckedCreateWithoutProductsInput!
  where: OrderWhereUniqueInput!
}

input OrderCreateOrConnectWithoutUserInput {
  create: OrderUncheckedCreateWithoutUserInput!
  where: OrderWhereUniqueInput!
}

input OrderCreateWithoutAddressInput {
  OrderStatus: String
  User: UserCreateNestedOneWithoutOrdersInput!
  date: DateTime
  products: OrderProductCreateNestedManyWithoutOrderInput
  subtotal: Int
  type: OrderType!
}

input OrderCreateWithoutProductsInput {
  OrderStatus: String
  User: UserCreateNestedOneWithoutOrdersInput!
  address: OrderAddressCreateNestedOneWithoutOrderInput
  date: DateTime
  subtotal: Int
  type: OrderType!
}

input OrderCreateWithoutUserInput {
  OrderStatus: String
  address: OrderAddressCreateNestedOneWithoutOrderInput
  date: DateTime
  products: OrderProductCreateNestedManyWithoutOrderInput
  subtotal: Int
  type: OrderType!
}

input OrderListRelationFilter {
  every: OrderWhereInput
  none: OrderWhereInput
  some: OrderWhereInput
}

type OrderMaxAggregateOutputType {
  OrderStatus: String
  date: DateTime
  id: Int
  subtotal: Int
  type: OrderType
  userId: Int
}

input OrderMaxOrderByAggregateInput {
  OrderStatus: SortOrder
  date: SortOrder
  id: SortOrder
  subtotal: SortOrder
  type: SortOrder
  userId: SortOrder
}

type OrderMinAggregateOutputType {
  OrderStatus: String
  date: DateTime
  id: Int
  subtotal: Int
  type: OrderType
  userId: Int
}

input OrderMinOrderByAggregateInput {
  OrderStatus: SortOrder
  date: SortOrder
  id: SortOrder
  subtotal: SortOrder
  type: SortOrder
  userId: SortOrder
}

input OrderOrderByRelationAggregateInput {
  _count: SortOrder
}

input OrderOrderByWithAggregationInput {
  OrderStatus: SortOrder
  _avg: OrderAvgOrderByAggregateInput
  _count: OrderCountOrderByAggregateInput
  _max: OrderMaxOrderByAggregateInput
  _min: OrderMinOrderByAggregateInput
  _sum: OrderSumOrderByAggregateInput
  date: SortOrder
  id: SortOrder
  subtotal: SortOrder
  type: SortOrder
  userId: SortOrder
}

input OrderOrderByWithRelationInput {
  OrderStatus: SortOrder
  User: UserOrderByWithRelationInput
  address: OrderAddressOrderByWithRelationInput
  date: SortOrder
  id: SortOrder
  products: OrderProductOrderByRelationAggregateInput
  subtotal: SortOrder
  type: SortOrder
  userId: SortOrder
}

type OrderProduct {
  Order: Order!
  discount: Float!
  id: Int!
  img: String!
  name: String!
  orderId: Int!
  price: Int!
  quantity: Int!
}

type OrderProductAvgAggregateOutputType {
  discount: Float
  id: Float
  orderId: Float
  price: Float
  quantity: Float
}

input OrderProductAvgOrderByAggregateInput {
  discount: SortOrder
  id: SortOrder
  orderId: SortOrder
  price: SortOrder
  quantity: SortOrder
}

type OrderProductCountAggregateOutputType {
  _all: Int!
  discount: Int!
  id: Int!
  img: Int!
  name: Int!
  orderId: Int!
  price: Int!
  quantity: Int!
}

input OrderProductCountOrderByAggregateInput {
  discount: SortOrder
  id: SortOrder
  img: SortOrder
  name: SortOrder
  orderId: SortOrder
  price: SortOrder
  quantity: SortOrder
}

input OrderProductCreateInput {
  Order: OrderCreateNestedOneWithoutProductsInput!
  discount: Float
  img: String!
  name: String!
  price: Int!
  quantity: Int!
}

input OrderProductCreateManyInput {
  discount: Float
  id: Int
  img: String!
  name: String!
  orderId: Int!
  price: Int!
  quantity: Int!
}

input OrderProductCreateManyOrderInput {
  discount: Float
  id: Int
  img: String!
  name: String!
  price: Int!
  quantity: Int!
}

input OrderProductCreateManyOrderInputEnvelope {
  data: OrderProductCreateManyOrderInput!
  skipDuplicates: Boolean
}

input OrderProductCreateNestedManyWithoutOrderInput {
  connect: [OrderProductWhereUniqueInput]
  connectOrCreate: [OrderProductCreateOrConnectWithoutOrderInput]
  create: [OrderProductCreateWithoutOrderInput]
  createMany: OrderProductCreateManyOrderInputEnvelope
}

input OrderProductCreateOrConnectWithoutOrderInput {
  create: OrderProductUncheckedCreateWithoutOrderInput!
  where: OrderProductWhereUniqueInput!
}

input OrderProductCreateWithoutOrderInput {
  discount: Float
  img: String!
  name: String!
  price: Int!
  quantity: Int!
}

input OrderProductListRelationFilter {
  every: OrderProductWhereInput
  none: OrderProductWhereInput
  some: OrderProductWhereInput
}

type OrderProductMaxAggregateOutputType {
  discount: Float
  id: Int
  img: String
  name: String
  orderId: Int
  price: Int
  quantity: Int
}

input OrderProductMaxOrderByAggregateInput {
  discount: SortOrder
  id: SortOrder
  img: SortOrder
  name: SortOrder
  orderId: SortOrder
  price: SortOrder
  quantity: SortOrder
}

type OrderProductMinAggregateOutputType {
  discount: Float
  id: Int
  img: String
  name: String
  orderId: Int
  price: Int
  quantity: Int
}

input OrderProductMinOrderByAggregateInput {
  discount: SortOrder
  id: SortOrder
  img: SortOrder
  name: SortOrder
  orderId: SortOrder
  price: SortOrder
  quantity: SortOrder
}

input OrderProductOrderByRelationAggregateInput {
  _count: SortOrder
}

input OrderProductOrderByWithAggregationInput {
  _avg: OrderProductAvgOrderByAggregateInput
  _count: OrderProductCountOrderByAggregateInput
  _max: OrderProductMaxOrderByAggregateInput
  _min: OrderProductMinOrderByAggregateInput
  _sum: OrderProductSumOrderByAggregateInput
  discount: SortOrder
  id: SortOrder
  img: SortOrder
  name: SortOrder
  orderId: SortOrder
  price: SortOrder
  quantity: SortOrder
}

input OrderProductOrderByWithRelationInput {
  Order: OrderOrderByWithRelationInput
  discount: SortOrder
  id: SortOrder
  img: SortOrder
  name: SortOrder
  orderId: SortOrder
  price: SortOrder
  quantity: SortOrder
}

enum OrderProductScalarFieldEnum {
  discount
  id
  img
  name
  orderId
  price
  quantity
}

input OrderProductScalarWhereInput {
  AND: [OrderProductScalarWhereInput]
  NOT: [OrderProductScalarWhereInput]
  OR: [OrderProductScalarWhereInput]
  discount: FloatFilter
  id: IntFilter
  img: StringFilter
  name: StringFilter
  orderId: IntFilter
  price: IntFilter
  quantity: IntFilter
}

input OrderProductScalarWhereWithAggregatesInput {
  AND: [OrderProductScalarWhereWithAggregatesInput]
  NOT: [OrderProductScalarWhereWithAggregatesInput]
  OR: [OrderProductScalarWhereWithAggregatesInput]
  discount: FloatWithAggregatesFilter
  id: IntWithAggregatesFilter
  img: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
  orderId: IntWithAggregatesFilter
  price: IntWithAggregatesFilter
  quantity: IntWithAggregatesFilter
}

type OrderProductSumAggregateOutputType {
  discount: Float
  id: Int
  orderId: Int
  price: Int
  quantity: Int
}

input OrderProductSumOrderByAggregateInput {
  discount: SortOrder
  id: SortOrder
  orderId: SortOrder
  price: SortOrder
  quantity: SortOrder
}

input OrderProductUncheckedCreateInput {
  discount: Float
  id: Int
  img: String!
  name: String!
  orderId: Int!
  price: Int!
  quantity: Int!
}

input OrderProductUncheckedCreateNestedManyWithoutOrderInput {
  connect: [OrderProductWhereUniqueInput]
  connectOrCreate: [OrderProductCreateOrConnectWithoutOrderInput]
  create: [OrderProductCreateWithoutOrderInput]
  createMany: OrderProductCreateManyOrderInputEnvelope
}

input OrderProductUncheckedCreateWithoutOrderInput {
  discount: Float
  id: Int
  img: String!
  name: String!
  price: Int!
  quantity: Int!
}

input OrderProductUncheckedUpdateInput {
  discount: FloatFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  img: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  orderId: IntFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
}

input OrderProductUncheckedUpdateManyInput {
  discount: FloatFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  img: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  orderId: IntFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
}

input OrderProductUncheckedUpdateManyWithoutOrderNestedInput {
  connect: [OrderProductWhereUniqueInput]
  connectOrCreate: [OrderProductCreateOrConnectWithoutOrderInput]
  create: [OrderProductCreateWithoutOrderInput]
  createMany: OrderProductCreateManyOrderInputEnvelope
  delete: [OrderProductWhereUniqueInput]
  deleteMany: [OrderProductScalarWhereInput]
  disconnect: [OrderProductWhereUniqueInput]
  set: [OrderProductWhereUniqueInput]
  update: [OrderProductUpdateWithWhereUniqueWithoutOrderInput]
  updateMany: [OrderProductUpdateManyWithWhereWithoutOrderInput]
  upsert: [OrderProductUpsertWithWhereUniqueWithoutOrderInput]
}

input OrderProductUncheckedUpdateManyWithoutProductsInput {
  discount: FloatFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  img: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
}

input OrderProductUncheckedUpdateWithoutOrderInput {
  discount: FloatFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  img: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
}

input OrderProductUpdateInput {
  Order: OrderUpdateOneRequiredWithoutProductsNestedInput
  discount: FloatFieldUpdateOperationsInput
  img: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
}

input OrderProductUpdateManyMutationInput {
  discount: FloatFieldUpdateOperationsInput
  img: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
}

input OrderProductUpdateManyWithWhereWithoutOrderInput {
  data: OrderProductUncheckedUpdateManyWithoutProductsInput!
  where: OrderProductScalarWhereInput!
}

input OrderProductUpdateManyWithoutOrderNestedInput {
  connect: [OrderProductWhereUniqueInput]
  connectOrCreate: [OrderProductCreateOrConnectWithoutOrderInput]
  create: [OrderProductCreateWithoutOrderInput]
  createMany: OrderProductCreateManyOrderInputEnvelope
  delete: [OrderProductWhereUniqueInput]
  deleteMany: [OrderProductScalarWhereInput]
  disconnect: [OrderProductWhereUniqueInput]
  set: [OrderProductWhereUniqueInput]
  update: [OrderProductUpdateWithWhereUniqueWithoutOrderInput]
  updateMany: [OrderProductUpdateManyWithWhereWithoutOrderInput]
  upsert: [OrderProductUpsertWithWhereUniqueWithoutOrderInput]
}

input OrderProductUpdateWithWhereUniqueWithoutOrderInput {
  data: OrderProductUncheckedUpdateWithoutOrderInput!
  where: OrderProductWhereUniqueInput!
}

input OrderProductUpdateWithoutOrderInput {
  discount: FloatFieldUpdateOperationsInput
  img: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
}

input OrderProductUpsertWithWhereUniqueWithoutOrderInput {
  create: OrderProductUncheckedCreateWithoutOrderInput!
  update: OrderProductUncheckedUpdateWithoutOrderInput!
  where: OrderProductWhereUniqueInput!
}

input OrderProductWhereInput {
  AND: [OrderProductWhereInput]
  NOT: [OrderProductWhereInput]
  OR: [OrderProductWhereInput]
  Order: OrderWhereInput
  discount: FloatFilter
  id: IntFilter
  img: StringFilter
  name: StringFilter
  orderId: IntFilter
  price: IntFilter
  quantity: IntFilter
}

input OrderProductWhereUniqueInput {
  id: Int
}

input OrderRelationFilter {
  is: OrderWhereInput
  isNot: OrderWhereInput
}

enum OrderScalarFieldEnum {
  OrderStatus
  date
  id
  subtotal
  type
  userId
}

input OrderScalarWhereInput {
  AND: [OrderScalarWhereInput]
  NOT: [OrderScalarWhereInput]
  OR: [OrderScalarWhereInput]
  OrderStatus: StringFilter
  date: DateTimeFilter
  id: IntFilter
  subtotal: IntFilter
  type: EnumOrderTypeFilter
  userId: IntFilter
}

input OrderScalarWhereWithAggregatesInput {
  AND: [OrderScalarWhereWithAggregatesInput]
  NOT: [OrderScalarWhereWithAggregatesInput]
  OR: [OrderScalarWhereWithAggregatesInput]
  OrderStatus: StringWithAggregatesFilter
  date: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  subtotal: IntWithAggregatesFilter
  type: EnumOrderTypeWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type OrderSumAggregateOutputType {
  id: Int
  subtotal: Int
  userId: Int
}

input OrderSumOrderByAggregateInput {
  id: SortOrder
  subtotal: SortOrder
  userId: SortOrder
}

enum OrderType {
  Cash
  Online
}

input OrderUncheckedCreateInput {
  OrderStatus: String
  address: OrderAddressUncheckedCreateNestedOneWithoutOrderInput
  date: DateTime
  id: Int
  products: OrderProductUncheckedCreateNestedManyWithoutOrderInput
  subtotal: Int
  type: OrderType!
  userId: Int!
}

input OrderUncheckedCreateNestedManyWithoutUserInput {
  connect: [OrderWhereUniqueInput]
  connectOrCreate: [OrderCreateOrConnectWithoutUserInput]
  create: [OrderCreateWithoutUserInput]
  createMany: OrderCreateManyUserInputEnvelope
}

input OrderUncheckedCreateWithoutAddressInput {
  OrderStatus: String
  date: DateTime
  id: Int
  products: OrderProductUncheckedCreateNestedManyWithoutOrderInput
  subtotal: Int
  type: OrderType!
  userId: Int!
}

input OrderUncheckedCreateWithoutProductsInput {
  OrderStatus: String
  address: OrderAddressUncheckedCreateNestedOneWithoutOrderInput
  date: DateTime
  id: Int
  subtotal: Int
  type: OrderType!
  userId: Int!
}

input OrderUncheckedCreateWithoutUserInput {
  OrderStatus: String
  address: OrderAddressUncheckedCreateNestedOneWithoutOrderInput
  date: DateTime
  id: Int
  products: OrderProductUncheckedCreateNestedManyWithoutOrderInput
  subtotal: Int
  type: OrderType!
}

input OrderUncheckedUpdateInput {
  OrderStatus: StringFieldUpdateOperationsInput
  address: OrderAddressUncheckedUpdateOneWithoutOrderNestedInput
  date: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  products: OrderProductUncheckedUpdateManyWithoutOrderNestedInput
  subtotal: IntFieldUpdateOperationsInput
  type: EnumOrderTypeFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input OrderUncheckedUpdateManyInput {
  OrderStatus: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  subtotal: IntFieldUpdateOperationsInput
  type: EnumOrderTypeFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input OrderUncheckedUpdateManyWithoutOrdersInput {
  OrderStatus: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  subtotal: IntFieldUpdateOperationsInput
  type: EnumOrderTypeFieldUpdateOperationsInput
}

input OrderUncheckedUpdateManyWithoutUserNestedInput {
  connect: [OrderWhereUniqueInput]
  connectOrCreate: [OrderCreateOrConnectWithoutUserInput]
  create: [OrderCreateWithoutUserInput]
  createMany: OrderCreateManyUserInputEnvelope
  delete: [OrderWhereUniqueInput]
  deleteMany: [OrderScalarWhereInput]
  disconnect: [OrderWhereUniqueInput]
  set: [OrderWhereUniqueInput]
  update: [OrderUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [OrderUpdateManyWithWhereWithoutUserInput]
  upsert: [OrderUpsertWithWhereUniqueWithoutUserInput]
}

input OrderUncheckedUpdateWithoutAddressInput {
  OrderStatus: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  products: OrderProductUncheckedUpdateManyWithoutOrderNestedInput
  subtotal: IntFieldUpdateOperationsInput
  type: EnumOrderTypeFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input OrderUncheckedUpdateWithoutProductsInput {
  OrderStatus: StringFieldUpdateOperationsInput
  address: OrderAddressUncheckedUpdateOneWithoutOrderNestedInput
  date: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  subtotal: IntFieldUpdateOperationsInput
  type: EnumOrderTypeFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input OrderUncheckedUpdateWithoutUserInput {
  OrderStatus: StringFieldUpdateOperationsInput
  address: OrderAddressUncheckedUpdateOneWithoutOrderNestedInput
  date: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  products: OrderProductUncheckedUpdateManyWithoutOrderNestedInput
  subtotal: IntFieldUpdateOperationsInput
  type: EnumOrderTypeFieldUpdateOperationsInput
}

input OrderUpdateInput {
  OrderStatus: StringFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutOrdersNestedInput
  address: OrderAddressUpdateOneWithoutOrderNestedInput
  date: DateTimeFieldUpdateOperationsInput
  products: OrderProductUpdateManyWithoutOrderNestedInput
  subtotal: IntFieldUpdateOperationsInput
  type: EnumOrderTypeFieldUpdateOperationsInput
}

input OrderUpdateManyMutationInput {
  OrderStatus: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  subtotal: IntFieldUpdateOperationsInput
  type: EnumOrderTypeFieldUpdateOperationsInput
}

input OrderUpdateManyWithWhereWithoutUserInput {
  data: OrderUncheckedUpdateManyWithoutOrdersInput!
  where: OrderScalarWhereInput!
}

input OrderUpdateManyWithoutUserNestedInput {
  connect: [OrderWhereUniqueInput]
  connectOrCreate: [OrderCreateOrConnectWithoutUserInput]
  create: [OrderCreateWithoutUserInput]
  createMany: OrderCreateManyUserInputEnvelope
  delete: [OrderWhereUniqueInput]
  deleteMany: [OrderScalarWhereInput]
  disconnect: [OrderWhereUniqueInput]
  set: [OrderWhereUniqueInput]
  update: [OrderUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [OrderUpdateManyWithWhereWithoutUserInput]
  upsert: [OrderUpsertWithWhereUniqueWithoutUserInput]
}

input OrderUpdateOneRequiredWithoutAddressNestedInput {
  connect: OrderWhereUniqueInput
  connectOrCreate: OrderCreateOrConnectWithoutAddressInput
  create: OrderUncheckedCreateWithoutAddressInput
  update: OrderUncheckedUpdateWithoutAddressInput
  upsert: OrderUpsertWithoutAddressInput
}

input OrderUpdateOneRequiredWithoutProductsNestedInput {
  connect: OrderWhereUniqueInput
  connectOrCreate: OrderCreateOrConnectWithoutProductsInput
  create: OrderUncheckedCreateWithoutProductsInput
  update: OrderUncheckedUpdateWithoutProductsInput
  upsert: OrderUpsertWithoutProductsInput
}

input OrderUpdateWithWhereUniqueWithoutUserInput {
  data: OrderUncheckedUpdateWithoutUserInput!
  where: OrderWhereUniqueInput!
}

input OrderUpdateWithoutAddressInput {
  OrderStatus: StringFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutOrdersNestedInput
  date: DateTimeFieldUpdateOperationsInput
  products: OrderProductUpdateManyWithoutOrderNestedInput
  subtotal: IntFieldUpdateOperationsInput
  type: EnumOrderTypeFieldUpdateOperationsInput
}

input OrderUpdateWithoutProductsInput {
  OrderStatus: StringFieldUpdateOperationsInput
  User: UserUpdateOneRequiredWithoutOrdersNestedInput
  address: OrderAddressUpdateOneWithoutOrderNestedInput
  date: DateTimeFieldUpdateOperationsInput
  subtotal: IntFieldUpdateOperationsInput
  type: EnumOrderTypeFieldUpdateOperationsInput
}

input OrderUpdateWithoutUserInput {
  OrderStatus: StringFieldUpdateOperationsInput
  address: OrderAddressUpdateOneWithoutOrderNestedInput
  date: DateTimeFieldUpdateOperationsInput
  products: OrderProductUpdateManyWithoutOrderNestedInput
  subtotal: IntFieldUpdateOperationsInput
  type: EnumOrderTypeFieldUpdateOperationsInput
}

input OrderUpsertWithWhereUniqueWithoutUserInput {
  create: OrderUncheckedCreateWithoutUserInput!
  update: OrderUncheckedUpdateWithoutUserInput!
  where: OrderWhereUniqueInput!
}

input OrderUpsertWithoutAddressInput {
  create: OrderUncheckedCreateWithoutAddressInput!
  update: OrderUncheckedUpdateWithoutAddressInput!
}

input OrderUpsertWithoutProductsInput {
  create: OrderUncheckedCreateWithoutProductsInput!
  update: OrderUncheckedUpdateWithoutProductsInput!
}

input OrderWhereInput {
  AND: [OrderWhereInput]
  NOT: [OrderWhereInput]
  OR: [OrderWhereInput]
  OrderStatus: StringFilter
  User: UserWhereInput
  address: OrderAddressWhereInput
  date: DateTimeFilter
  id: IntFilter
  products: OrderProductListRelationFilter
  subtotal: IntFilter
  type: EnumOrderTypeFilter
  userId: IntFilter
}

input OrderWhereUniqueInput {
  id: Int
}

type PaymentIntent {
  clientSecret: String
}

type Product {
  ShoppingProduct(cursor: ShoppingProductWhereUniqueInput, distinct: ShoppingProductScalarFieldEnum, orderBy: ShoppingProductOrderByWithRelationInput, skip: Int, take: Int, where: ShoppingProductWhereInput): [ShoppingProduct!]!
  _count: ProductCountOutputType!
  avgRating: Float!
  category: String!
  description: String!
  discount: Float!
  gpu: String
  id: Int!
  img: String!
  likes: Int!
  manufacturer: String!
  memory: String
  name: String!
  os: String
  price: Int!
  processor: String
  reviews(cursor: ReviewWhereUniqueInput, distinct: ReviewScalarFieldEnum, orderBy: ReviewOrderByWithRelationInput, skip: Int, take: Int, where: ReviewWhereInput): [Review!]!
  screen: String
  stock: Int!
  storage: String
}

type ProductAvgAggregateOutputType {
  discount: Float
  id: Float
  likes: Float
  price: Float
  stock: Float
}

input ProductAvgOrderByAggregateInput {
  discount: SortOrder
  id: SortOrder
  likes: SortOrder
  price: SortOrder
  stock: SortOrder
}

type ProductCountAggregateOutputType {
  _all: Int!
  category: Int!
  description: Int!
  discount: Int!
  gpu: Int!
  id: Int!
  img: Int!
  likes: Int!
  manufacturer: Int!
  memory: Int!
  name: Int!
  os: Int!
  price: Int!
  processor: Int!
  screen: Int!
  stock: Int!
  storage: Int!
}

input ProductCountOrderByAggregateInput {
  category: SortOrder
  description: SortOrder
  discount: SortOrder
  gpu: SortOrder
  id: SortOrder
  img: SortOrder
  likes: SortOrder
  manufacturer: SortOrder
  memory: SortOrder
  name: SortOrder
  os: SortOrder
  price: SortOrder
  processor: SortOrder
  screen: SortOrder
  stock: SortOrder
  storage: SortOrder
}

type ProductCountOutputType {
  ShoppingProduct: Int!
  reviews: Int!
}

input ProductCreateInput {
  ShoppingProduct: ShoppingProductCreateNestedManyWithoutProductInput
  category: String!
  description: String!
  discount: Float
  gpu: String
  img: String!
  likes: Int
  manufacturer: String!
  memory: String
  name: String!
  os: String
  price: Int
  processor: String
  reviews: ReviewCreateNestedManyWithoutProductInput
  screen: String
  stock: Int
  storage: String
}

input ProductCreateManyInput {
  category: String!
  description: String!
  discount: Float
  gpu: String
  id: Int
  img: String!
  likes: Int
  manufacturer: String!
  memory: String
  name: String!
  os: String
  price: Int
  processor: String
  screen: String
  stock: Int
  storage: String
}

input ProductCreateNestedOneWithoutReviewsInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutReviewsInput
  create: ProductUncheckedCreateWithoutReviewsInput
}

input ProductCreateNestedOneWithoutShoppingProductInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutShoppingProductInput
  create: ProductUncheckedCreateWithoutShoppingProductInput
}

input ProductCreateOrConnectWithoutReviewsInput {
  create: ProductUncheckedCreateWithoutReviewsInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateOrConnectWithoutShoppingProductInput {
  create: ProductUncheckedCreateWithoutShoppingProductInput!
  where: ProductWhereUniqueInput!
}

input ProductCreateWithoutReviewsInput {
  ShoppingProduct: ShoppingProductCreateNestedManyWithoutProductInput
  category: String!
  description: String!
  discount: Float
  gpu: String
  img: String!
  likes: Int
  manufacturer: String!
  memory: String
  name: String!
  os: String
  price: Int
  processor: String
  screen: String
  stock: Int
  storage: String
}

input ProductCreateWithoutShoppingProductInput {
  category: String!
  description: String!
  discount: Float
  gpu: String
  img: String!
  likes: Int
  manufacturer: String!
  memory: String
  name: String!
  os: String
  price: Int
  processor: String
  reviews: ReviewCreateNestedManyWithoutProductInput
  screen: String
  stock: Int
  storage: String
}

type ProductMaxAggregateOutputType {
  category: String
  description: String
  discount: Float
  gpu: String
  id: Int
  img: String
  likes: Int
  manufacturer: String
  memory: String
  name: String
  os: String
  price: Int
  processor: String
  screen: String
  stock: Int
  storage: String
}

input ProductMaxOrderByAggregateInput {
  category: SortOrder
  description: SortOrder
  discount: SortOrder
  gpu: SortOrder
  id: SortOrder
  img: SortOrder
  likes: SortOrder
  manufacturer: SortOrder
  memory: SortOrder
  name: SortOrder
  os: SortOrder
  price: SortOrder
  processor: SortOrder
  screen: SortOrder
  stock: SortOrder
  storage: SortOrder
}

type ProductMinAggregateOutputType {
  category: String
  description: String
  discount: Float
  gpu: String
  id: Int
  img: String
  likes: Int
  manufacturer: String
  memory: String
  name: String
  os: String
  price: Int
  processor: String
  screen: String
  stock: Int
  storage: String
}

input ProductMinOrderByAggregateInput {
  category: SortOrder
  description: SortOrder
  discount: SortOrder
  gpu: SortOrder
  id: SortOrder
  img: SortOrder
  likes: SortOrder
  manufacturer: SortOrder
  memory: SortOrder
  name: SortOrder
  os: SortOrder
  price: SortOrder
  processor: SortOrder
  screen: SortOrder
  stock: SortOrder
  storage: SortOrder
}

input ProductOrderByWithAggregationInput {
  _avg: ProductAvgOrderByAggregateInput
  _count: ProductCountOrderByAggregateInput
  _max: ProductMaxOrderByAggregateInput
  _min: ProductMinOrderByAggregateInput
  _sum: ProductSumOrderByAggregateInput
  category: SortOrder
  description: SortOrder
  discount: SortOrder
  gpu: SortOrder
  id: SortOrder
  img: SortOrder
  likes: SortOrder
  manufacturer: SortOrder
  memory: SortOrder
  name: SortOrder
  os: SortOrder
  price: SortOrder
  processor: SortOrder
  screen: SortOrder
  stock: SortOrder
  storage: SortOrder
}

input ProductOrderByWithRelationInput {
  ShoppingProduct: ShoppingProductOrderByRelationAggregateInput
  category: SortOrder
  description: SortOrder
  discount: SortOrder
  gpu: SortOrder
  id: SortOrder
  img: SortOrder
  likes: SortOrder
  manufacturer: SortOrder
  memory: SortOrder
  name: SortOrder
  os: SortOrder
  price: SortOrder
  processor: SortOrder
  reviews: ReviewOrderByRelationAggregateInput
  screen: SortOrder
  stock: SortOrder
  storage: SortOrder
}

input ProductRelationFilter {
  is: ProductWhereInput
  isNot: ProductWhereInput
}

enum ProductScalarFieldEnum {
  category
  description
  discount
  gpu
  id
  img
  likes
  manufacturer
  memory
  name
  os
  price
  processor
  screen
  stock
  storage
}

input ProductScalarWhereWithAggregatesInput {
  AND: [ProductScalarWhereWithAggregatesInput]
  NOT: [ProductScalarWhereWithAggregatesInput]
  OR: [ProductScalarWhereWithAggregatesInput]
  category: StringWithAggregatesFilter
  description: StringWithAggregatesFilter
  discount: FloatWithAggregatesFilter
  gpu: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  img: StringWithAggregatesFilter
  likes: IntWithAggregatesFilter
  manufacturer: StringWithAggregatesFilter
  memory: StringNullableWithAggregatesFilter
  name: StringWithAggregatesFilter
  os: StringNullableWithAggregatesFilter
  price: IntWithAggregatesFilter
  processor: StringNullableWithAggregatesFilter
  screen: StringNullableWithAggregatesFilter
  stock: IntWithAggregatesFilter
  storage: StringNullableWithAggregatesFilter
}

type ProductSumAggregateOutputType {
  discount: Float
  id: Int
  likes: Int
  price: Int
  stock: Int
}

input ProductSumOrderByAggregateInput {
  discount: SortOrder
  id: SortOrder
  likes: SortOrder
  price: SortOrder
  stock: SortOrder
}

input ProductUncheckedCreateInput {
  ShoppingProduct: ShoppingProductUncheckedCreateNestedManyWithoutProductInput
  category: String!
  description: String!
  discount: Float
  gpu: String
  id: Int
  img: String!
  likes: Int
  manufacturer: String!
  memory: String
  name: String!
  os: String
  price: Int
  processor: String
  reviews: ReviewUncheckedCreateNestedManyWithoutProductInput
  screen: String
  stock: Int
  storage: String
}

input ProductUncheckedCreateWithoutReviewsInput {
  ShoppingProduct: ShoppingProductUncheckedCreateNestedManyWithoutProductInput
  category: String!
  description: String!
  discount: Float
  gpu: String
  id: Int
  img: String!
  likes: Int
  manufacturer: String!
  memory: String
  name: String!
  os: String
  price: Int
  processor: String
  screen: String
  stock: Int
  storage: String
}

input ProductUncheckedCreateWithoutShoppingProductInput {
  category: String!
  description: String!
  discount: Float
  gpu: String
  id: Int
  img: String!
  likes: Int
  manufacturer: String!
  memory: String
  name: String!
  os: String
  price: Int
  processor: String
  reviews: ReviewUncheckedCreateNestedManyWithoutProductInput
  screen: String
  stock: Int
  storage: String
}

input ProductUncheckedUpdateInput {
  ShoppingProduct: ShoppingProductUncheckedUpdateManyWithoutProductNestedInput
  category: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  discount: FloatFieldUpdateOperationsInput
  gpu: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  img: StringFieldUpdateOperationsInput
  likes: IntFieldUpdateOperationsInput
  manufacturer: StringFieldUpdateOperationsInput
  memory: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  os: NullableStringFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  processor: NullableStringFieldUpdateOperationsInput
  reviews: ReviewUncheckedUpdateManyWithoutProductNestedInput
  screen: NullableStringFieldUpdateOperationsInput
  stock: IntFieldUpdateOperationsInput
  storage: NullableStringFieldUpdateOperationsInput
}

input ProductUncheckedUpdateManyInput {
  category: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  discount: FloatFieldUpdateOperationsInput
  gpu: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  img: StringFieldUpdateOperationsInput
  likes: IntFieldUpdateOperationsInput
  manufacturer: StringFieldUpdateOperationsInput
  memory: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  os: NullableStringFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  processor: NullableStringFieldUpdateOperationsInput
  screen: NullableStringFieldUpdateOperationsInput
  stock: IntFieldUpdateOperationsInput
  storage: NullableStringFieldUpdateOperationsInput
}

input ProductUncheckedUpdateWithoutReviewsInput {
  ShoppingProduct: ShoppingProductUncheckedUpdateManyWithoutProductNestedInput
  category: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  discount: FloatFieldUpdateOperationsInput
  gpu: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  img: StringFieldUpdateOperationsInput
  likes: IntFieldUpdateOperationsInput
  manufacturer: StringFieldUpdateOperationsInput
  memory: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  os: NullableStringFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  processor: NullableStringFieldUpdateOperationsInput
  screen: NullableStringFieldUpdateOperationsInput
  stock: IntFieldUpdateOperationsInput
  storage: NullableStringFieldUpdateOperationsInput
}

input ProductUncheckedUpdateWithoutShoppingProductInput {
  category: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  discount: FloatFieldUpdateOperationsInput
  gpu: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  img: StringFieldUpdateOperationsInput
  likes: IntFieldUpdateOperationsInput
  manufacturer: StringFieldUpdateOperationsInput
  memory: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  os: NullableStringFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  processor: NullableStringFieldUpdateOperationsInput
  reviews: ReviewUncheckedUpdateManyWithoutProductNestedInput
  screen: NullableStringFieldUpdateOperationsInput
  stock: IntFieldUpdateOperationsInput
  storage: NullableStringFieldUpdateOperationsInput
}

input ProductUpdateInput {
  ShoppingProduct: ShoppingProductUpdateManyWithoutProductNestedInput
  category: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  discount: FloatFieldUpdateOperationsInput
  gpu: NullableStringFieldUpdateOperationsInput
  img: StringFieldUpdateOperationsInput
  likes: IntFieldUpdateOperationsInput
  manufacturer: StringFieldUpdateOperationsInput
  memory: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  os: NullableStringFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  processor: NullableStringFieldUpdateOperationsInput
  reviews: ReviewUpdateManyWithoutProductNestedInput
  screen: NullableStringFieldUpdateOperationsInput
  stock: IntFieldUpdateOperationsInput
  storage: NullableStringFieldUpdateOperationsInput
}

input ProductUpdateManyMutationInput {
  category: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  discount: FloatFieldUpdateOperationsInput
  gpu: NullableStringFieldUpdateOperationsInput
  img: StringFieldUpdateOperationsInput
  likes: IntFieldUpdateOperationsInput
  manufacturer: StringFieldUpdateOperationsInput
  memory: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  os: NullableStringFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  processor: NullableStringFieldUpdateOperationsInput
  screen: NullableStringFieldUpdateOperationsInput
  stock: IntFieldUpdateOperationsInput
  storage: NullableStringFieldUpdateOperationsInput
}

input ProductUpdateOneRequiredWithoutReviewsNestedInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutReviewsInput
  create: ProductUncheckedCreateWithoutReviewsInput
  update: ProductUncheckedUpdateWithoutReviewsInput
  upsert: ProductUpsertWithoutReviewsInput
}

input ProductUpdateOneRequiredWithoutShoppingProductNestedInput {
  connect: ProductWhereUniqueInput
  connectOrCreate: ProductCreateOrConnectWithoutShoppingProductInput
  create: ProductUncheckedCreateWithoutShoppingProductInput
  update: ProductUncheckedUpdateWithoutShoppingProductInput
  upsert: ProductUpsertWithoutShoppingProductInput
}

input ProductUpdateWithoutReviewsInput {
  ShoppingProduct: ShoppingProductUpdateManyWithoutProductNestedInput
  category: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  discount: FloatFieldUpdateOperationsInput
  gpu: NullableStringFieldUpdateOperationsInput
  img: StringFieldUpdateOperationsInput
  likes: IntFieldUpdateOperationsInput
  manufacturer: StringFieldUpdateOperationsInput
  memory: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  os: NullableStringFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  processor: NullableStringFieldUpdateOperationsInput
  screen: NullableStringFieldUpdateOperationsInput
  stock: IntFieldUpdateOperationsInput
  storage: NullableStringFieldUpdateOperationsInput
}

input ProductUpdateWithoutShoppingProductInput {
  category: StringFieldUpdateOperationsInput
  description: StringFieldUpdateOperationsInput
  discount: FloatFieldUpdateOperationsInput
  gpu: NullableStringFieldUpdateOperationsInput
  img: StringFieldUpdateOperationsInput
  likes: IntFieldUpdateOperationsInput
  manufacturer: StringFieldUpdateOperationsInput
  memory: NullableStringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
  os: NullableStringFieldUpdateOperationsInput
  price: IntFieldUpdateOperationsInput
  processor: NullableStringFieldUpdateOperationsInput
  reviews: ReviewUpdateManyWithoutProductNestedInput
  screen: NullableStringFieldUpdateOperationsInput
  stock: IntFieldUpdateOperationsInput
  storage: NullableStringFieldUpdateOperationsInput
}

input ProductUpsertWithoutReviewsInput {
  create: ProductUncheckedCreateWithoutReviewsInput!
  update: ProductUncheckedUpdateWithoutReviewsInput!
}

input ProductUpsertWithoutShoppingProductInput {
  create: ProductUncheckedCreateWithoutShoppingProductInput!
  update: ProductUncheckedUpdateWithoutShoppingProductInput!
}

input ProductWhereInput {
  AND: [ProductWhereInput]
  NOT: [ProductWhereInput]
  OR: [ProductWhereInput]
  ShoppingProduct: ShoppingProductListRelationFilter
  category: StringFilter
  description: StringFilter
  discount: FloatFilter
  gpu: StringNullableFilter
  id: IntFilter
  img: StringFilter
  likes: IntFilter
  manufacturer: StringFilter
  memory: StringNullableFilter
  name: StringFilter
  os: StringNullableFilter
  price: IntFilter
  processor: StringNullableFilter
  reviews: ReviewListRelationFilter
  screen: StringNullableFilter
  stock: IntFilter
  storage: StringNullableFilter
}

input ProductWhereUniqueInput {
  id: Int
  name: String
}

type Query {
  findFirstAddress(cursor: AddressWhereUniqueInput, distinct: [AddressScalarFieldEnum], orderBy: [AddressOrderByWithRelationInput], skip: Int, take: Int, where: AddressWhereInput): Address
  findFirstOrder(cursor: OrderWhereUniqueInput, distinct: [OrderScalarFieldEnum], orderBy: [OrderOrderByWithRelationInput], skip: Int, take: Int, where: OrderWhereInput): Order
  findFirstOrderAddress(cursor: OrderAddressWhereUniqueInput, distinct: [OrderAddressScalarFieldEnum], orderBy: [OrderAddressOrderByWithRelationInput], skip: Int, take: Int, where: OrderAddressWhereInput): OrderAddress
  findFirstProduct(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum], orderBy: [ProductOrderByWithRelationInput], skip: Int, take: Int, where: ProductWhereInput): Product
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum], orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): User
  findManyOrder(cursor: OrderWhereUniqueInput, distinct: [OrderScalarFieldEnum], orderBy: [OrderOrderByWithRelationInput], skip: Int, take: Int, where: OrderWhereInput): [Order!]!
  findManyOrderCount(cursor: OrderWhereUniqueInput, distinct: [OrderScalarFieldEnum], orderBy: [OrderOrderByWithRelationInput], skip: Int, take: Int, where: OrderWhereInput): Int!
  findManyOrderProduct(cursor: OrderProductWhereUniqueInput, distinct: [OrderProductScalarFieldEnum], orderBy: [OrderProductOrderByWithRelationInput], skip: Int, take: Int, where: OrderProductWhereInput): [OrderProduct!]!
  findManyProduct(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum], orderBy: [ProductOrderByWithRelationInput], skip: Int, take: Int, where: ProductWhereInput): [Product!]!
  findManyProductCount(cursor: ProductWhereUniqueInput, distinct: [ProductScalarFieldEnum], orderBy: [ProductOrderByWithRelationInput], skip: Int, take: Int, where: ProductWhereInput): Int!
  findManyReview(cursor: ReviewWhereUniqueInput, distinct: [ReviewScalarFieldEnum], orderBy: [ReviewOrderByWithRelationInput], skip: Int, take: Int, where: ReviewWhereInput): [Review!]!
  findManyReviewCount(cursor: ReviewWhereUniqueInput, distinct: [ReviewScalarFieldEnum], orderBy: [ReviewOrderByWithRelationInput], skip: Int, take: Int, where: ReviewWhereInput): Int!
  findManyShoppingProduct(cursor: ShoppingProductWhereUniqueInput, distinct: [ShoppingProductScalarFieldEnum], orderBy: [ShoppingProductOrderByWithRelationInput], skip: Int, take: Int, where: ShoppingProductWhereInput): [ShoppingProduct!]!
  findManyUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum], orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): [User!]!
  findManyUserCount(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum], orderBy: [UserOrderByWithRelationInput], skip: Int, take: Int, where: UserWhereInput): Int!
  getAdminStats: adminStats
  getPaymentIntent(amount: Int!): PaymentIntent
  me: User
  userByJwt(token: String!): User
}

enum QueryMode {
  default
  insensitive
}

type Review {
  Product: Product!
  User: User!
  comment: String!
  date: DateTime!
  id: Int!
  productId: Int!
  rating: Int!
  userId: Int!
}

type ReviewAvgAggregateOutputType {
  id: Float
  productId: Float
  rating: Float
  userId: Float
}

input ReviewAvgOrderByAggregateInput {
  id: SortOrder
  productId: SortOrder
  rating: SortOrder
  userId: SortOrder
}

type ReviewCountAggregateOutputType {
  _all: Int!
  comment: Int!
  date: Int!
  id: Int!
  productId: Int!
  rating: Int!
  userId: Int!
}

input ReviewCountOrderByAggregateInput {
  comment: SortOrder
  date: SortOrder
  id: SortOrder
  productId: SortOrder
  rating: SortOrder
  userId: SortOrder
}

input ReviewCreateInput {
  Product: ProductCreateNestedOneWithoutReviewsInput!
  User: UserCreateNestedOneWithoutReviewsInput!
  comment: String
  date: DateTime
  rating: Int
}

input ReviewCreateManyInput {
  comment: String
  date: DateTime
  id: Int
  productId: Int!
  rating: Int
  userId: Int!
}

input ReviewCreateManyProductInput {
  comment: String
  date: DateTime
  id: Int
  rating: Int
  userId: Int!
}

input ReviewCreateManyProductInputEnvelope {
  data: ReviewCreateManyProductInput!
  skipDuplicates: Boolean
}

input ReviewCreateManyUserInput {
  comment: String
  date: DateTime
  id: Int
  productId: Int!
  rating: Int
}

input ReviewCreateManyUserInputEnvelope {
  data: ReviewCreateManyUserInput!
  skipDuplicates: Boolean
}

input ReviewCreateNestedManyWithoutProductInput {
  connect: [ReviewWhereUniqueInput]
  connectOrCreate: [ReviewCreateOrConnectWithoutProductInput]
  create: [ReviewCreateWithoutProductInput]
  createMany: ReviewCreateManyProductInputEnvelope
}

input ReviewCreateNestedManyWithoutUserInput {
  connect: [ReviewWhereUniqueInput]
  connectOrCreate: [ReviewCreateOrConnectWithoutUserInput]
  create: [ReviewCreateWithoutUserInput]
  createMany: ReviewCreateManyUserInputEnvelope
}

input ReviewCreateOrConnectWithoutProductInput {
  create: ReviewUncheckedCreateWithoutProductInput!
  where: ReviewWhereUniqueInput!
}

input ReviewCreateOrConnectWithoutUserInput {
  create: ReviewUncheckedCreateWithoutUserInput!
  where: ReviewWhereUniqueInput!
}

input ReviewCreateWithoutProductInput {
  User: UserCreateNestedOneWithoutReviewsInput!
  comment: String
  date: DateTime
  rating: Int
}

input ReviewCreateWithoutUserInput {
  Product: ProductCreateNestedOneWithoutReviewsInput!
  comment: String
  date: DateTime
  rating: Int
}

input ReviewListRelationFilter {
  every: ReviewWhereInput
  none: ReviewWhereInput
  some: ReviewWhereInput
}

type ReviewMaxAggregateOutputType {
  comment: String
  date: DateTime
  id: Int
  productId: Int
  rating: Int
  userId: Int
}

input ReviewMaxOrderByAggregateInput {
  comment: SortOrder
  date: SortOrder
  id: SortOrder
  productId: SortOrder
  rating: SortOrder
  userId: SortOrder
}

type ReviewMinAggregateOutputType {
  comment: String
  date: DateTime
  id: Int
  productId: Int
  rating: Int
  userId: Int
}

input ReviewMinOrderByAggregateInput {
  comment: SortOrder
  date: SortOrder
  id: SortOrder
  productId: SortOrder
  rating: SortOrder
  userId: SortOrder
}

input ReviewOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReviewOrderByWithAggregationInput {
  _avg: ReviewAvgOrderByAggregateInput
  _count: ReviewCountOrderByAggregateInput
  _max: ReviewMaxOrderByAggregateInput
  _min: ReviewMinOrderByAggregateInput
  _sum: ReviewSumOrderByAggregateInput
  comment: SortOrder
  date: SortOrder
  id: SortOrder
  productId: SortOrder
  rating: SortOrder
  userId: SortOrder
}

input ReviewOrderByWithRelationInput {
  Product: ProductOrderByWithRelationInput
  User: UserOrderByWithRelationInput
  comment: SortOrder
  date: SortOrder
  id: SortOrder
  productId: SortOrder
  rating: SortOrder
  userId: SortOrder
}

enum ReviewScalarFieldEnum {
  comment
  date
  id
  productId
  rating
  userId
}

input ReviewScalarWhereInput {
  AND: [ReviewScalarWhereInput]
  NOT: [ReviewScalarWhereInput]
  OR: [ReviewScalarWhereInput]
  comment: StringFilter
  date: DateTimeFilter
  id: IntFilter
  productId: IntFilter
  rating: IntFilter
  userId: IntFilter
}

input ReviewScalarWhereWithAggregatesInput {
  AND: [ReviewScalarWhereWithAggregatesInput]
  NOT: [ReviewScalarWhereWithAggregatesInput]
  OR: [ReviewScalarWhereWithAggregatesInput]
  comment: StringWithAggregatesFilter
  date: DateTimeWithAggregatesFilter
  id: IntWithAggregatesFilter
  productId: IntWithAggregatesFilter
  rating: IntWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type ReviewSumAggregateOutputType {
  id: Int
  productId: Int
  rating: Int
  userId: Int
}

input ReviewSumOrderByAggregateInput {
  id: SortOrder
  productId: SortOrder
  rating: SortOrder
  userId: SortOrder
}

input ReviewUncheckedCreateInput {
  comment: String
  date: DateTime
  id: Int
  productId: Int!
  rating: Int
  userId: Int!
}

input ReviewUncheckedCreateNestedManyWithoutProductInput {
  connect: [ReviewWhereUniqueInput]
  connectOrCreate: [ReviewCreateOrConnectWithoutProductInput]
  create: [ReviewCreateWithoutProductInput]
  createMany: ReviewCreateManyProductInputEnvelope
}

input ReviewUncheckedCreateNestedManyWithoutUserInput {
  connect: [ReviewWhereUniqueInput]
  connectOrCreate: [ReviewCreateOrConnectWithoutUserInput]
  create: [ReviewCreateWithoutUserInput]
  createMany: ReviewCreateManyUserInputEnvelope
}

input ReviewUncheckedCreateWithoutProductInput {
  comment: String
  date: DateTime
  id: Int
  rating: Int
  userId: Int!
}

input ReviewUncheckedCreateWithoutUserInput {
  comment: String
  date: DateTime
  id: Int
  productId: Int!
  rating: Int
}

input ReviewUncheckedUpdateInput {
  comment: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  productId: IntFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input ReviewUncheckedUpdateManyInput {
  comment: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  productId: IntFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input ReviewUncheckedUpdateManyWithoutProductNestedInput {
  connect: [ReviewWhereUniqueInput]
  connectOrCreate: [ReviewCreateOrConnectWithoutProductInput]
  create: [ReviewCreateWithoutProductInput]
  createMany: ReviewCreateManyProductInputEnvelope
  delete: [ReviewWhereUniqueInput]
  deleteMany: [ReviewScalarWhereInput]
  disconnect: [ReviewWhereUniqueInput]
  set: [ReviewWhereUniqueInput]
  update: [ReviewUpdateWithWhereUniqueWithoutProductInput]
  updateMany: [ReviewUpdateManyWithWhereWithoutProductInput]
  upsert: [ReviewUpsertWithWhereUniqueWithoutProductInput]
}

input ReviewUncheckedUpdateManyWithoutReviewsInput {
  comment: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  productId: IntFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
}

input ReviewUncheckedUpdateManyWithoutUserNestedInput {
  connect: [ReviewWhereUniqueInput]
  connectOrCreate: [ReviewCreateOrConnectWithoutUserInput]
  create: [ReviewCreateWithoutUserInput]
  createMany: ReviewCreateManyUserInputEnvelope
  delete: [ReviewWhereUniqueInput]
  deleteMany: [ReviewScalarWhereInput]
  disconnect: [ReviewWhereUniqueInput]
  set: [ReviewWhereUniqueInput]
  update: [ReviewUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [ReviewUpdateManyWithWhereWithoutUserInput]
  upsert: [ReviewUpsertWithWhereUniqueWithoutUserInput]
}

input ReviewUncheckedUpdateWithoutProductInput {
  comment: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input ReviewUncheckedUpdateWithoutUserInput {
  comment: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  productId: IntFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
}

input ReviewUpdateInput {
  Product: ProductUpdateOneRequiredWithoutReviewsNestedInput
  User: UserUpdateOneRequiredWithoutReviewsNestedInput
  comment: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
}

input ReviewUpdateManyMutationInput {
  comment: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
}

input ReviewUpdateManyWithWhereWithoutProductInput {
  data: ReviewUncheckedUpdateManyWithoutReviewsInput!
  where: ReviewScalarWhereInput!
}

input ReviewUpdateManyWithWhereWithoutUserInput {
  data: ReviewUncheckedUpdateManyWithoutReviewsInput!
  where: ReviewScalarWhereInput!
}

input ReviewUpdateManyWithoutProductNestedInput {
  connect: [ReviewWhereUniqueInput]
  connectOrCreate: [ReviewCreateOrConnectWithoutProductInput]
  create: [ReviewCreateWithoutProductInput]
  createMany: ReviewCreateManyProductInputEnvelope
  delete: [ReviewWhereUniqueInput]
  deleteMany: [ReviewScalarWhereInput]
  disconnect: [ReviewWhereUniqueInput]
  set: [ReviewWhereUniqueInput]
  update: [ReviewUpdateWithWhereUniqueWithoutProductInput]
  updateMany: [ReviewUpdateManyWithWhereWithoutProductInput]
  upsert: [ReviewUpsertWithWhereUniqueWithoutProductInput]
}

input ReviewUpdateManyWithoutUserNestedInput {
  connect: [ReviewWhereUniqueInput]
  connectOrCreate: [ReviewCreateOrConnectWithoutUserInput]
  create: [ReviewCreateWithoutUserInput]
  createMany: ReviewCreateManyUserInputEnvelope
  delete: [ReviewWhereUniqueInput]
  deleteMany: [ReviewScalarWhereInput]
  disconnect: [ReviewWhereUniqueInput]
  set: [ReviewWhereUniqueInput]
  update: [ReviewUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [ReviewUpdateManyWithWhereWithoutUserInput]
  upsert: [ReviewUpsertWithWhereUniqueWithoutUserInput]
}

input ReviewUpdateWithWhereUniqueWithoutProductInput {
  data: ReviewUncheckedUpdateWithoutProductInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpdateWithWhereUniqueWithoutUserInput {
  data: ReviewUncheckedUpdateWithoutUserInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpdateWithoutProductInput {
  User: UserUpdateOneRequiredWithoutReviewsNestedInput
  comment: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
}

input ReviewUpdateWithoutUserInput {
  Product: ProductUpdateOneRequiredWithoutReviewsNestedInput
  comment: StringFieldUpdateOperationsInput
  date: DateTimeFieldUpdateOperationsInput
  rating: IntFieldUpdateOperationsInput
}

input ReviewUpsertWithWhereUniqueWithoutProductInput {
  create: ReviewUncheckedCreateWithoutProductInput!
  update: ReviewUncheckedUpdateWithoutProductInput!
  where: ReviewWhereUniqueInput!
}

input ReviewUpsertWithWhereUniqueWithoutUserInput {
  create: ReviewUncheckedCreateWithoutUserInput!
  update: ReviewUncheckedUpdateWithoutUserInput!
  where: ReviewWhereUniqueInput!
}

input ReviewWhereInput {
  AND: [ReviewWhereInput]
  NOT: [ReviewWhereInput]
  OR: [ReviewWhereInput]
  Product: ProductWhereInput
  User: UserWhereInput
  comment: StringFilter
  date: DateTimeFilter
  id: IntFilter
  productId: IntFilter
  rating: IntFilter
  userId: IntFilter
}

input ReviewWhereUniqueInput {
  id: Int
}

enum Role {
  ADMIN
  USER
}

type ShoppingProduct {
  Product: Product!
  User: User!
  id: Int!
  productId: Int!
  quantity: Int!
  userId: Int!
}

type ShoppingProductAvgAggregateOutputType {
  id: Float
  productId: Float
  quantity: Float
  userId: Float
}

input ShoppingProductAvgOrderByAggregateInput {
  id: SortOrder
  productId: SortOrder
  quantity: SortOrder
  userId: SortOrder
}

input ShoppingProductCartProductCompoundUniqueInput {
  productId: Int!
  userId: Int!
}

type ShoppingProductCountAggregateOutputType {
  _all: Int!
  id: Int!
  productId: Int!
  quantity: Int!
  userId: Int!
}

input ShoppingProductCountOrderByAggregateInput {
  id: SortOrder
  productId: SortOrder
  quantity: SortOrder
  userId: SortOrder
}

input ShoppingProductCreateInput {
  Product: ProductCreateNestedOneWithoutShoppingProductInput!
  User: UserCreateNestedOneWithoutCartInput!
  quantity: Int!
}

input ShoppingProductCreateManyInput {
  id: Int
  productId: Int!
  quantity: Int!
  userId: Int!
}

input ShoppingProductCreateManyProductInput {
  id: Int
  quantity: Int!
  userId: Int!
}

input ShoppingProductCreateManyProductInputEnvelope {
  data: ShoppingProductCreateManyProductInput!
  skipDuplicates: Boolean
}

input ShoppingProductCreateManyUserInput {
  id: Int
  productId: Int!
  quantity: Int!
}

input ShoppingProductCreateManyUserInputEnvelope {
  data: ShoppingProductCreateManyUserInput!
  skipDuplicates: Boolean
}

input ShoppingProductCreateNestedManyWithoutProductInput {
  connect: [ShoppingProductWhereUniqueInput]
  connectOrCreate: [ShoppingProductCreateOrConnectWithoutProductInput]
  create: [ShoppingProductCreateWithoutProductInput]
  createMany: ShoppingProductCreateManyProductInputEnvelope
}

input ShoppingProductCreateNestedManyWithoutUserInput {
  connect: [ShoppingProductWhereUniqueInput]
  connectOrCreate: [ShoppingProductCreateOrConnectWithoutUserInput]
  create: [ShoppingProductCreateWithoutUserInput]
  createMany: ShoppingProductCreateManyUserInputEnvelope
}

input ShoppingProductCreateOrConnectWithoutProductInput {
  create: ShoppingProductUncheckedCreateWithoutProductInput!
  where: ShoppingProductWhereUniqueInput!
}

input ShoppingProductCreateOrConnectWithoutUserInput {
  create: ShoppingProductUncheckedCreateWithoutUserInput!
  where: ShoppingProductWhereUniqueInput!
}

input ShoppingProductCreateWithoutProductInput {
  User: UserCreateNestedOneWithoutCartInput!
  quantity: Int!
}

input ShoppingProductCreateWithoutUserInput {
  Product: ProductCreateNestedOneWithoutShoppingProductInput!
  quantity: Int!
}

input ShoppingProductListRelationFilter {
  every: ShoppingProductWhereInput
  none: ShoppingProductWhereInput
  some: ShoppingProductWhereInput
}

type ShoppingProductMaxAggregateOutputType {
  id: Int
  productId: Int
  quantity: Int
  userId: Int
}

input ShoppingProductMaxOrderByAggregateInput {
  id: SortOrder
  productId: SortOrder
  quantity: SortOrder
  userId: SortOrder
}

type ShoppingProductMinAggregateOutputType {
  id: Int
  productId: Int
  quantity: Int
  userId: Int
}

input ShoppingProductMinOrderByAggregateInput {
  id: SortOrder
  productId: SortOrder
  quantity: SortOrder
  userId: SortOrder
}

input ShoppingProductOrderByRelationAggregateInput {
  _count: SortOrder
}

input ShoppingProductOrderByWithAggregationInput {
  _avg: ShoppingProductAvgOrderByAggregateInput
  _count: ShoppingProductCountOrderByAggregateInput
  _max: ShoppingProductMaxOrderByAggregateInput
  _min: ShoppingProductMinOrderByAggregateInput
  _sum: ShoppingProductSumOrderByAggregateInput
  id: SortOrder
  productId: SortOrder
  quantity: SortOrder
  userId: SortOrder
}

input ShoppingProductOrderByWithRelationInput {
  Product: ProductOrderByWithRelationInput
  User: UserOrderByWithRelationInput
  id: SortOrder
  productId: SortOrder
  quantity: SortOrder
  userId: SortOrder
}

enum ShoppingProductScalarFieldEnum {
  id
  productId
  quantity
  userId
}

input ShoppingProductScalarWhereInput {
  AND: [ShoppingProductScalarWhereInput]
  NOT: [ShoppingProductScalarWhereInput]
  OR: [ShoppingProductScalarWhereInput]
  id: IntFilter
  productId: IntFilter
  quantity: IntFilter
  userId: IntFilter
}

input ShoppingProductScalarWhereWithAggregatesInput {
  AND: [ShoppingProductScalarWhereWithAggregatesInput]
  NOT: [ShoppingProductScalarWhereWithAggregatesInput]
  OR: [ShoppingProductScalarWhereWithAggregatesInput]
  id: IntWithAggregatesFilter
  productId: IntWithAggregatesFilter
  quantity: IntWithAggregatesFilter
  userId: IntWithAggregatesFilter
}

type ShoppingProductSumAggregateOutputType {
  id: Int
  productId: Int
  quantity: Int
  userId: Int
}

input ShoppingProductSumOrderByAggregateInput {
  id: SortOrder
  productId: SortOrder
  quantity: SortOrder
  userId: SortOrder
}

input ShoppingProductUncheckedCreateInput {
  id: Int
  productId: Int!
  quantity: Int!
  userId: Int!
}

input ShoppingProductUncheckedCreateNestedManyWithoutProductInput {
  connect: [ShoppingProductWhereUniqueInput]
  connectOrCreate: [ShoppingProductCreateOrConnectWithoutProductInput]
  create: [ShoppingProductCreateWithoutProductInput]
  createMany: ShoppingProductCreateManyProductInputEnvelope
}

input ShoppingProductUncheckedCreateNestedManyWithoutUserInput {
  connect: [ShoppingProductWhereUniqueInput]
  connectOrCreate: [ShoppingProductCreateOrConnectWithoutUserInput]
  create: [ShoppingProductCreateWithoutUserInput]
  createMany: ShoppingProductCreateManyUserInputEnvelope
}

input ShoppingProductUncheckedCreateWithoutProductInput {
  id: Int
  quantity: Int!
  userId: Int!
}

input ShoppingProductUncheckedCreateWithoutUserInput {
  id: Int
  productId: Int!
  quantity: Int!
}

input ShoppingProductUncheckedUpdateInput {
  id: IntFieldUpdateOperationsInput
  productId: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input ShoppingProductUncheckedUpdateManyInput {
  id: IntFieldUpdateOperationsInput
  productId: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input ShoppingProductUncheckedUpdateManyWithoutCartInput {
  id: IntFieldUpdateOperationsInput
  productId: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
}

input ShoppingProductUncheckedUpdateManyWithoutProductNestedInput {
  connect: [ShoppingProductWhereUniqueInput]
  connectOrCreate: [ShoppingProductCreateOrConnectWithoutProductInput]
  create: [ShoppingProductCreateWithoutProductInput]
  createMany: ShoppingProductCreateManyProductInputEnvelope
  delete: [ShoppingProductWhereUniqueInput]
  deleteMany: [ShoppingProductScalarWhereInput]
  disconnect: [ShoppingProductWhereUniqueInput]
  set: [ShoppingProductWhereUniqueInput]
  update: [ShoppingProductUpdateWithWhereUniqueWithoutProductInput]
  updateMany: [ShoppingProductUpdateManyWithWhereWithoutProductInput]
  upsert: [ShoppingProductUpsertWithWhereUniqueWithoutProductInput]
}

input ShoppingProductUncheckedUpdateManyWithoutShoppingProductInput {
  id: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input ShoppingProductUncheckedUpdateManyWithoutUserNestedInput {
  connect: [ShoppingProductWhereUniqueInput]
  connectOrCreate: [ShoppingProductCreateOrConnectWithoutUserInput]
  create: [ShoppingProductCreateWithoutUserInput]
  createMany: ShoppingProductCreateManyUserInputEnvelope
  delete: [ShoppingProductWhereUniqueInput]
  deleteMany: [ShoppingProductScalarWhereInput]
  disconnect: [ShoppingProductWhereUniqueInput]
  set: [ShoppingProductWhereUniqueInput]
  update: [ShoppingProductUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [ShoppingProductUpdateManyWithWhereWithoutUserInput]
  upsert: [ShoppingProductUpsertWithWhereUniqueWithoutUserInput]
}

input ShoppingProductUncheckedUpdateWithoutProductInput {
  id: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
  userId: IntFieldUpdateOperationsInput
}

input ShoppingProductUncheckedUpdateWithoutUserInput {
  id: IntFieldUpdateOperationsInput
  productId: IntFieldUpdateOperationsInput
  quantity: IntFieldUpdateOperationsInput
}

input ShoppingProductUpdateInput {
  Product: ProductUpdateOneRequiredWithoutShoppingProductNestedInput
  User: UserUpdateOneRequiredWithoutCartNestedInput
  quantity: IntFieldUpdateOperationsInput
}

input ShoppingProductUpdateManyMutationInput {
  quantity: IntFieldUpdateOperationsInput
}

input ShoppingProductUpdateManyWithWhereWithoutProductInput {
  data: ShoppingProductUncheckedUpdateManyWithoutShoppingProductInput!
  where: ShoppingProductScalarWhereInput!
}

input ShoppingProductUpdateManyWithWhereWithoutUserInput {
  data: ShoppingProductUncheckedUpdateManyWithoutCartInput!
  where: ShoppingProductScalarWhereInput!
}

input ShoppingProductUpdateManyWithoutProductNestedInput {
  connect: [ShoppingProductWhereUniqueInput]
  connectOrCreate: [ShoppingProductCreateOrConnectWithoutProductInput]
  create: [ShoppingProductCreateWithoutProductInput]
  createMany: ShoppingProductCreateManyProductInputEnvelope
  delete: [ShoppingProductWhereUniqueInput]
  deleteMany: [ShoppingProductScalarWhereInput]
  disconnect: [ShoppingProductWhereUniqueInput]
  set: [ShoppingProductWhereUniqueInput]
  update: [ShoppingProductUpdateWithWhereUniqueWithoutProductInput]
  updateMany: [ShoppingProductUpdateManyWithWhereWithoutProductInput]
  upsert: [ShoppingProductUpsertWithWhereUniqueWithoutProductInput]
}

input ShoppingProductUpdateManyWithoutUserNestedInput {
  connect: [ShoppingProductWhereUniqueInput]
  connectOrCreate: [ShoppingProductCreateOrConnectWithoutUserInput]
  create: [ShoppingProductCreateWithoutUserInput]
  createMany: ShoppingProductCreateManyUserInputEnvelope
  delete: [ShoppingProductWhereUniqueInput]
  deleteMany: [ShoppingProductScalarWhereInput]
  disconnect: [ShoppingProductWhereUniqueInput]
  set: [ShoppingProductWhereUniqueInput]
  update: [ShoppingProductUpdateWithWhereUniqueWithoutUserInput]
  updateMany: [ShoppingProductUpdateManyWithWhereWithoutUserInput]
  upsert: [ShoppingProductUpsertWithWhereUniqueWithoutUserInput]
}

input ShoppingProductUpdateWithWhereUniqueWithoutProductInput {
  data: ShoppingProductUncheckedUpdateWithoutProductInput!
  where: ShoppingProductWhereUniqueInput!
}

input ShoppingProductUpdateWithWhereUniqueWithoutUserInput {
  data: ShoppingProductUncheckedUpdateWithoutUserInput!
  where: ShoppingProductWhereUniqueInput!
}

input ShoppingProductUpdateWithoutProductInput {
  User: UserUpdateOneRequiredWithoutCartNestedInput
  quantity: IntFieldUpdateOperationsInput
}

input ShoppingProductUpdateWithoutUserInput {
  Product: ProductUpdateOneRequiredWithoutShoppingProductNestedInput
  quantity: IntFieldUpdateOperationsInput
}

input ShoppingProductUpsertWithWhereUniqueWithoutProductInput {
  create: ShoppingProductUncheckedCreateWithoutProductInput!
  update: ShoppingProductUncheckedUpdateWithoutProductInput!
  where: ShoppingProductWhereUniqueInput!
}

input ShoppingProductUpsertWithWhereUniqueWithoutUserInput {
  create: ShoppingProductUncheckedCreateWithoutUserInput!
  update: ShoppingProductUncheckedUpdateWithoutUserInput!
  where: ShoppingProductWhereUniqueInput!
}

input ShoppingProductWhereInput {
  AND: [ShoppingProductWhereInput]
  NOT: [ShoppingProductWhereInput]
  OR: [ShoppingProductWhereInput]
  Product: ProductWhereInput
  User: UserWhereInput
  id: IntFilter
  productId: IntFilter
  quantity: IntFilter
  userId: IntFilter
}

input ShoppingProductWhereUniqueInput {
  cartProduct: ShoppingProductCartProductCompoundUniqueInput
  id: Int
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String]
  startsWith: String
}

enum TransactionIsolationLevel {
  ReadCommitted
  ReadUncommitted
  RepeatableRead
  Serializable
}

type User {
  _count: UserCountOutputType!
  address: Address
  birthday: DateTime
  cart(cursor: ShoppingProductWhereUniqueInput, distinct: ShoppingProductScalarFieldEnum, orderBy: ShoppingProductOrderByWithRelationInput, skip: Int, take: Int, where: ShoppingProductWhereInput): [ShoppingProduct!]!
  createdAt: DateTime!
  email: String!
  firstName: String!
  gender: String
  id: Int!
  lastName: String!
  orders(cursor: OrderWhereUniqueInput, distinct: OrderScalarFieldEnum, orderBy: OrderOrderByWithRelationInput, skip: Int, take: Int, where: OrderWhereInput): [Order!]!
  password: String!
  reviews(cursor: ReviewWhereUniqueInput, distinct: ReviewScalarFieldEnum, orderBy: ReviewOrderByWithRelationInput, skip: Int, take: Int, where: ReviewWhereInput): [Review!]!
  role: Role!
}

type UserAvgAggregateOutputType {
  id: Float
}

input UserAvgOrderByAggregateInput {
  id: SortOrder
}

type UserCountAggregateOutputType {
  _all: Int!
  birthday: Int!
  createdAt: Int!
  email: Int!
  firstName: Int!
  gender: Int!
  id: Int!
  lastName: Int!
  password: Int!
  role: Int!
}

input UserCountOrderByAggregateInput {
  birthday: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  gender: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  role: SortOrder
}

type UserCountOutputType {
  cart: Int!
  orders: Int!
  reviews: Int!
}

input UserCreateInput {
  address: AddressCreateNestedOneWithoutUserInput
  birthday: DateTime
  cart: ShoppingProductCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  firstName: String!
  gender: String
  lastName: String!
  orders: OrderCreateNestedManyWithoutUserInput
  password: String!
  reviews: ReviewCreateNestedManyWithoutUserInput
  role: Role
}

input UserCreateManyInput {
  birthday: DateTime
  createdAt: DateTime
  email: String!
  firstName: String!
  gender: String
  id: Int
  lastName: String!
  password: String!
  role: Role
}

input UserCreateNestedOneWithoutAddressInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAddressInput
  create: UserUncheckedCreateWithoutAddressInput
}

input UserCreateNestedOneWithoutCartInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCartInput
  create: UserUncheckedCreateWithoutCartInput
}

input UserCreateNestedOneWithoutOrdersInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutOrdersInput
  create: UserUncheckedCreateWithoutOrdersInput
}

input UserCreateNestedOneWithoutReviewsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReviewsInput
  create: UserUncheckedCreateWithoutReviewsInput
}

input UserCreateOrConnectWithoutAddressInput {
  create: UserUncheckedCreateWithoutAddressInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutCartInput {
  create: UserUncheckedCreateWithoutCartInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutOrdersInput {
  create: UserUncheckedCreateWithoutOrdersInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutReviewsInput {
  create: UserUncheckedCreateWithoutReviewsInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAddressInput {
  birthday: DateTime
  cart: ShoppingProductCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  firstName: String!
  gender: String
  lastName: String!
  orders: OrderCreateNestedManyWithoutUserInput
  password: String!
  reviews: ReviewCreateNestedManyWithoutUserInput
  role: Role
}

input UserCreateWithoutCartInput {
  address: AddressCreateNestedOneWithoutUserInput
  birthday: DateTime
  createdAt: DateTime
  email: String!
  firstName: String!
  gender: String
  lastName: String!
  orders: OrderCreateNestedManyWithoutUserInput
  password: String!
  reviews: ReviewCreateNestedManyWithoutUserInput
  role: Role
}

input UserCreateWithoutOrdersInput {
  address: AddressCreateNestedOneWithoutUserInput
  birthday: DateTime
  cart: ShoppingProductCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  firstName: String!
  gender: String
  lastName: String!
  password: String!
  reviews: ReviewCreateNestedManyWithoutUserInput
  role: Role
}

input UserCreateWithoutReviewsInput {
  address: AddressCreateNestedOneWithoutUserInput
  birthday: DateTime
  cart: ShoppingProductCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  firstName: String!
  gender: String
  lastName: String!
  orders: OrderCreateNestedManyWithoutUserInput
  password: String!
  role: Role
}

type UserMaxAggregateOutputType {
  birthday: DateTime
  createdAt: DateTime
  email: String
  firstName: String
  gender: String
  id: Int
  lastName: String
  password: String
  role: Role
}

input UserMaxOrderByAggregateInput {
  birthday: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  gender: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  role: SortOrder
}

type UserMinAggregateOutputType {
  birthday: DateTime
  createdAt: DateTime
  email: String
  firstName: String
  gender: String
  id: Int
  lastName: String
  password: String
  role: Role
}

input UserMinOrderByAggregateInput {
  birthday: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  gender: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  role: SortOrder
}

input UserOrderByWithAggregationInput {
  _avg: UserAvgOrderByAggregateInput
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  _sum: UserSumOrderByAggregateInput
  birthday: SortOrder
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  gender: SortOrder
  id: SortOrder
  lastName: SortOrder
  password: SortOrder
  role: SortOrder
}

input UserOrderByWithRelationInput {
  address: AddressOrderByWithRelationInput
  birthday: SortOrder
  cart: ShoppingProductOrderByRelationAggregateInput
  createdAt: SortOrder
  email: SortOrder
  firstName: SortOrder
  gender: SortOrder
  id: SortOrder
  lastName: SortOrder
  orders: OrderOrderByRelationAggregateInput
  password: SortOrder
  reviews: ReviewOrderByRelationAggregateInput
  role: SortOrder
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  birthday
  createdAt
  email
  firstName
  gender
  id
  lastName
  password
  role
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput]
  NOT: [UserScalarWhereWithAggregatesInput]
  OR: [UserScalarWhereWithAggregatesInput]
  birthday: DateTimeNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  email: StringWithAggregatesFilter
  firstName: StringWithAggregatesFilter
  gender: StringNullableWithAggregatesFilter
  id: IntWithAggregatesFilter
  lastName: StringWithAggregatesFilter
  password: StringWithAggregatesFilter
  role: EnumRoleWithAggregatesFilter
}

type UserSumAggregateOutputType {
  id: Int
}

input UserSumOrderByAggregateInput {
  id: SortOrder
}

input UserUncheckedCreateInput {
  address: AddressUncheckedCreateNestedOneWithoutUserInput
  birthday: DateTime
  cart: ShoppingProductUncheckedCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  firstName: String!
  gender: String
  id: Int
  lastName: String!
  orders: OrderUncheckedCreateNestedManyWithoutUserInput
  password: String!
  reviews: ReviewUncheckedCreateNestedManyWithoutUserInput
  role: Role
}

input UserUncheckedCreateWithoutAddressInput {
  birthday: DateTime
  cart: ShoppingProductUncheckedCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  firstName: String!
  gender: String
  id: Int
  lastName: String!
  orders: OrderUncheckedCreateNestedManyWithoutUserInput
  password: String!
  reviews: ReviewUncheckedCreateNestedManyWithoutUserInput
  role: Role
}

input UserUncheckedCreateWithoutCartInput {
  address: AddressUncheckedCreateNestedOneWithoutUserInput
  birthday: DateTime
  createdAt: DateTime
  email: String!
  firstName: String!
  gender: String
  id: Int
  lastName: String!
  orders: OrderUncheckedCreateNestedManyWithoutUserInput
  password: String!
  reviews: ReviewUncheckedCreateNestedManyWithoutUserInput
  role: Role
}

input UserUncheckedCreateWithoutOrdersInput {
  address: AddressUncheckedCreateNestedOneWithoutUserInput
  birthday: DateTime
  cart: ShoppingProductUncheckedCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  firstName: String!
  gender: String
  id: Int
  lastName: String!
  password: String!
  reviews: ReviewUncheckedCreateNestedManyWithoutUserInput
  role: Role
}

input UserUncheckedCreateWithoutReviewsInput {
  address: AddressUncheckedCreateNestedOneWithoutUserInput
  birthday: DateTime
  cart: ShoppingProductUncheckedCreateNestedManyWithoutUserInput
  createdAt: DateTime
  email: String!
  firstName: String!
  gender: String
  id: Int
  lastName: String!
  orders: OrderUncheckedCreateNestedManyWithoutUserInput
  password: String!
  role: Role
}

input UserUncheckedUpdateInput {
  address: AddressUncheckedUpdateOneWithoutUserNestedInput
  birthday: NullableDateTimeFieldUpdateOperationsInput
  cart: ShoppingProductUncheckedUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  orders: OrderUncheckedUpdateManyWithoutUserNestedInput
  password: StringFieldUpdateOperationsInput
  reviews: ReviewUncheckedUpdateManyWithoutUserNestedInput
  role: EnumRoleFieldUpdateOperationsInput
}

input UserUncheckedUpdateManyInput {
  birthday: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutAddressInput {
  birthday: NullableDateTimeFieldUpdateOperationsInput
  cart: ShoppingProductUncheckedUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  orders: OrderUncheckedUpdateManyWithoutUserNestedInput
  password: StringFieldUpdateOperationsInput
  reviews: ReviewUncheckedUpdateManyWithoutUserNestedInput
  role: EnumRoleFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutCartInput {
  address: AddressUncheckedUpdateOneWithoutUserNestedInput
  birthday: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  orders: OrderUncheckedUpdateManyWithoutUserNestedInput
  password: StringFieldUpdateOperationsInput
  reviews: ReviewUncheckedUpdateManyWithoutUserNestedInput
  role: EnumRoleFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutOrdersInput {
  address: AddressUncheckedUpdateOneWithoutUserNestedInput
  birthday: NullableDateTimeFieldUpdateOperationsInput
  cart: ShoppingProductUncheckedUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  reviews: ReviewUncheckedUpdateManyWithoutUserNestedInput
  role: EnumRoleFieldUpdateOperationsInput
}

input UserUncheckedUpdateWithoutReviewsInput {
  address: AddressUncheckedUpdateOneWithoutUserNestedInput
  birthday: NullableDateTimeFieldUpdateOperationsInput
  cart: ShoppingProductUncheckedUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  id: IntFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  orders: OrderUncheckedUpdateManyWithoutUserNestedInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
}

input UserUpdateInput {
  address: AddressUpdateOneWithoutUserNestedInput
  birthday: NullableDateTimeFieldUpdateOperationsInput
  cart: ShoppingProductUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutUserNestedInput
  password: StringFieldUpdateOperationsInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  role: EnumRoleFieldUpdateOperationsInput
}

input UserUpdateManyMutationInput {
  birthday: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutAddressNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAddressInput
  create: UserUncheckedCreateWithoutAddressInput
  update: UserUncheckedUpdateWithoutAddressInput
  upsert: UserUpsertWithoutAddressInput
}

input UserUpdateOneRequiredWithoutCartNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutCartInput
  create: UserUncheckedCreateWithoutCartInput
  update: UserUncheckedUpdateWithoutCartInput
  upsert: UserUpsertWithoutCartInput
}

input UserUpdateOneRequiredWithoutOrdersNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutOrdersInput
  create: UserUncheckedCreateWithoutOrdersInput
  update: UserUncheckedUpdateWithoutOrdersInput
  upsert: UserUpsertWithoutOrdersInput
}

input UserUpdateOneRequiredWithoutReviewsNestedInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReviewsInput
  create: UserUncheckedCreateWithoutReviewsInput
  update: UserUncheckedUpdateWithoutReviewsInput
  upsert: UserUpsertWithoutReviewsInput
}

input UserUpdateWithoutAddressInput {
  birthday: NullableDateTimeFieldUpdateOperationsInput
  cart: ShoppingProductUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutUserNestedInput
  password: StringFieldUpdateOperationsInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  role: EnumRoleFieldUpdateOperationsInput
}

input UserUpdateWithoutCartInput {
  address: AddressUpdateOneWithoutUserNestedInput
  birthday: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutUserNestedInput
  password: StringFieldUpdateOperationsInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  role: EnumRoleFieldUpdateOperationsInput
}

input UserUpdateWithoutOrdersInput {
  address: AddressUpdateOneWithoutUserNestedInput
  birthday: NullableDateTimeFieldUpdateOperationsInput
  cart: ShoppingProductUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  password: StringFieldUpdateOperationsInput
  reviews: ReviewUpdateManyWithoutUserNestedInput
  role: EnumRoleFieldUpdateOperationsInput
}

input UserUpdateWithoutReviewsInput {
  address: AddressUpdateOneWithoutUserNestedInput
  birthday: NullableDateTimeFieldUpdateOperationsInput
  cart: ShoppingProductUpdateManyWithoutUserNestedInput
  createdAt: DateTimeFieldUpdateOperationsInput
  email: StringFieldUpdateOperationsInput
  firstName: StringFieldUpdateOperationsInput
  gender: NullableStringFieldUpdateOperationsInput
  lastName: StringFieldUpdateOperationsInput
  orders: OrderUpdateManyWithoutUserNestedInput
  password: StringFieldUpdateOperationsInput
  role: EnumRoleFieldUpdateOperationsInput
}

input UserUpsertWithoutAddressInput {
  create: UserUncheckedCreateWithoutAddressInput!
  update: UserUncheckedUpdateWithoutAddressInput!
}

input UserUpsertWithoutCartInput {
  create: UserUncheckedCreateWithoutCartInput!
  update: UserUncheckedUpdateWithoutCartInput!
}

input UserUpsertWithoutOrdersInput {
  create: UserUncheckedCreateWithoutOrdersInput!
  update: UserUncheckedUpdateWithoutOrdersInput!
}

input UserUpsertWithoutReviewsInput {
  create: UserUncheckedCreateWithoutReviewsInput!
  update: UserUncheckedUpdateWithoutReviewsInput!
}

input UserWhereInput {
  AND: [UserWhereInput]
  NOT: [UserWhereInput]
  OR: [UserWhereInput]
  address: AddressWhereInput
  birthday: DateTimeNullableFilter
  cart: ShoppingProductListRelationFilter
  createdAt: DateTimeFilter
  email: StringFilter
  firstName: StringFilter
  gender: StringNullableFilter
  id: IntFilter
  lastName: StringFilter
  orders: OrderListRelationFilter
  password: StringFilter
  reviews: ReviewListRelationFilter
  role: EnumRoleFilter
}

input UserWhereUniqueInput {
  email: String
  id: Int
}

type adminStats {
  ordersCount: Int!
  ordersSum: Int!
  productsByCategory: [CategoryCount]!
  reviewsCount: Int!
  usersCount: Int!
}